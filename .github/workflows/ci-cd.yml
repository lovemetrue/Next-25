name: CI/CD

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE: ghcr.io/${{ github.repository_owner }}/telegram-bot:latest

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=short,prefix=sha-

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (compose.yaml needed to upload)
        uses: actions/checkout@v4

      - name: Generate compose.yaml
        run: |
          mkdir -p deploy_tmp
          sed "s|ghcr.io/placeholder/telegram-bot:latest|${IMAGE}|g" compose.template.yaml > deploy_tmp/compose.yaml

      - name: Upload compose.yaml to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "compose.yaml"
          target: "/opt/telegram-bot/"
          strip_components: 0



      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          IMAGE: ghcr.io/${{ github.repository_owner }}/telegram-bot:latest
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: BOT_TOKEN,IMAGE
          script: |
            set -euo pipefail
            sudo mkdir -p /opt/telegram-bot
            cd /opt/telegram-bot

            # создаём .env на сервере
            (umask 077; cat > .env <<EOF
            BOT_TOKEN=${BOT_TOKEN}
            IMAGE=${IMAGE}
            TZ=Europe/Paris
            EOF
            )

            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com | sh
              REMOTE_USER="$(id -un)"
              sudo usermod -aG docker "$REMOTE_USER" || true
            fi

            echo "Pull new image and restart container"
            docker compose pull
            docker compose up -d --remove-orphans
            docker image prune -f