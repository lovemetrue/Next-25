# handlers/export_orders.py
import io
import os
import tempfile
from datetime import datetime, timedelta
from typing import List, Optional

from telebot import TeleBot, types

# Excel
from openpyxl import Workbook

# PDF (reportlab) + —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è TTF-—à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

from database.models import Order, User, UserRole, OrderStatus, OrderPrefix, Attachment
from states.request_states import RequestsStates
# –ü—É—Ç—å(—ã) –≥–¥–µ –∏—Å–∫–∞—Ç—å TTF-—à—Ä–∏—Ñ—Ç—ã (–ø–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–∏—á–Ω—ã—Ö)
_TRY_TTF_PATHS = [
    "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",
    "/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf",
    "/usr/share/fonts/truetype/freefont/FreeSans.ttf",
    "C:\\Windows\\Fonts\\arial.ttf",
    "/Library/Fonts/Arial Unicode.ttf",
    "/Library/Fonts/DejaVuSans.ttf",
]


def _register_cyrillic_font() -> Optional[str]:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å TTF-—à—Ä–∏—Ñ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∫–∏—Ä–∏–ª–ª–∏—Ü—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ –∏–ª–∏ None (–µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å).
    """
    for p in _TRY_TTF_PATHS:
        try:
            if os.path.exists(p):
                font_name = "UserCyrFont"
                pdfmetrics.registerFont(TTFont(font_name, p))
                return font_name
        except Exception:
            continue
    # –ù–µ –Ω–∞—à–ª–∏/–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏
    return None


# –ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —à—Ä–∏—Ñ—Ç –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
_REGISTERED_FONT = _register_cyrillic_font()


def register_attachments_reports_handlers(bot: TeleBot):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞—è–≤–æ–∫ –≤ Excel / PDF:
    - –®–∞–≥ 1: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ (–Ω–µ–¥–µ–ª—è / –º–µ—Å—è—Ü / –≤—Å—ë)
    - –®–∞–≥ 2: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç (Excel / PDF)
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã orders, –≤–∫–ª—é—á–∞—è –ø—Ä–µ—Ñ–∏–∫—Å –∑–∞—è–≤–∫–∏ (OrderPrefix.label).
    –ü—Ä–∞–≤–∞:
      - MANAGER (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å) –≤–∏–¥–∏—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏
      - DISPATCHER –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏ (Order.dispatcher == user)
      - –¥—Ä—É–≥–∏–µ —Ä–æ–ª–∏ ‚Äî –æ—Ç–∫–∞–∑
    """

    # -------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ --------------------

    def _get_user_from_update(update) -> Optional[User]:
        """
        –í–µ—Ä–Ω—É—Ç—å User –ø–æ update (callback_query –∏–ª–∏ message) –∏–ª–∏ None.
        """
        from_user = getattr(update, "from_user", None)
        if not from_user:
            return None
        return User.get_or_none(User.tg_id == from_user.id)

    def _fetch_orders_for_user(user: User, period: str) -> List[Order]:
        """
        –í–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ Order –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–æ–ª—å—é user –∏ –ø–µ—Ä–∏–æ–¥–æ–º.
        period in {"week", "month", "all"}.
        """
        now = datetime.now()
        q = Order.select().order_by(Order.datetime.desc())
        if period == "week":
            since = now - timedelta(days=7)
            q = q.where(Order.datetime >= since)
        elif period == "month":
            since = now - timedelta(days=30)
            q = q.where(Order.datetime >= since)
        # —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏
        if int(user.role) == int(UserRole.MANAGER):
            return list(q)
        elif int(user.role) == int(UserRole.DISPATCHER):
            return list(q.where(Order.dispatcher == user))
        else:
            return []

    def _row_from_order(o: Order) -> List:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã/–ø–¥—Ñ.
        –í–∫–ª—é—á–∞–µ—Ç: ID, –ø—Ä–µ—Ñ–∏–∫—Å(—Å –º–µ—Ç–∫–æ–π), —Å—Ç–∞—Ç—É—Å(–º–µ—Ç–∫–∞), –¥–∞—Ç–∞, –æ—Ç–∫—É–¥–∞, –∫—É–¥–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä, –≤–æ–¥–∏—Ç–µ–ª—å, —Ç–∏–ø –≥—Ä—É–∑–∞, –≤–µ—Å/–æ–±—ä—ë–º, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        """
        try:
            prefix_label = OrderPrefix(o.prefix).label if getattr(o, "prefix", None) is not None else ""
        except Exception:
            prefix_label = ""
        status_label = OrderStatus(o.status).label if getattr(o, "status", None) is not None else ""
        dt_text = o.datetime.strftime("%d.%m.%Y %H:%M") if getattr(o, "datetime", None) else ""
        dispatcher = (o.dispatcher.first_name if getattr(o, "dispatcher", None) else "") or ""
        driver = (o.driver.first_name if getattr(o, "driver", None) else "") or ""
        return [
            o.id,
            prefix_label,
            status_label,
            dt_text,
            o.from_addr or "",
            o.to_addr or "",
            dispatcher,
            driver,
            o.cargo_type or "",
            o.weight_volume or "",
            (o.comment or "")
        ]

    # -------------------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel (openpyxl -> temp file) --------------------

    def _generate_excel_file(orders: List[Order], tmp_path: str):
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç Excel-—Ñ–∞–π–ª –Ω–∞ tmp_path.
        """
        wb = Workbook()
        ws = wb.active
        ws.title = "orders"

        headers = ["ID", "–ü—Ä–µ—Ñ–∏–∫—Å", "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞", "–û—Ç–∫—É–¥–∞", "–ö—É–¥–∞", "–î–∏—Å–ø–µ—Ç—á–µ—Ä", "–í–æ–¥–∏—Ç–µ–ª—å", "–¢–∏–ø –≥—Ä—É–∑–∞", "–í–µ—Å/–æ–±—ä—ë–º", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]
        ws.append(headers)

        for o in orders:
            ws.append(_row_from_order(o))

        wb.save(tmp_path)

    # -------------------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF (reportlab -> temp file) --------------------

    def _generate_pdf_file(orders: List[Order], tmp_path: str):
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç PDF –Ω–∞ tmp_path. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É, –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —à—Ä–∏—Ñ—Ç.
        """
        c = canvas.Canvas(tmp_path, pagesize=A4)
        width, height = A4
        x_margin = 40
        y = height - 40
        line_height = 12

        title_font = _REGISTERED_FONT if _REGISTERED_FONT else "Helvetica-Bold"
        normal_font = _REGISTERED_FONT if _REGISTERED_FONT else "Helvetica"

        # –∑–∞–≥–æ–ª–æ–≤–æ–∫
        c.setFont(title_font, 14)
        c.drawString(x_margin, y, "–û—Ç—á—ë—Ç –ø–æ –∑–∞—è–≤–∫–∞–º")
        y -= 20

        c.setFont(normal_font, 9)

        for o in orders:
            row = _row_from_order(o)
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É
            line = (
                f"#{row[0]} | {row[1]} | {row[2]} | {row[3]} | "
                f"{row[4]} ‚Üí {row[5]} | –î–∏—Å–ø.: {row[6]} | –í–æ–¥.: {row[7]} | {row[8]} | {row[9]}"
            )
            # –µ—Å–ª–∏ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —Ä–∞–∑–±–∏–≤–∞–µ–º
            max_len = 180  # –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ
            if len(line) <= max_len:
                c.drawString(x_margin, y, line)
                y -= line_height
            else:
                # —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
                words = line.split(" ")
                cur = ""
                for w in words:
                    if len(cur) + len(w) + 1 <= max_len:
                        cur += (w + " ")
                    else:
                        c.drawString(x_margin, y, cur.strip())
                        y -= line_height
                        cur = w + " "
                if cur:
                    c.drawString(x_margin, y, cur.strip())
                    y -= line_height

            # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å) ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (–æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
            comment = row[10] or ""
            if comment:
                comment_preview = comment if len(comment) <= 200 else (comment[:197] + "...")
                c.drawString(x_margin + 10, y, f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_preview}")
                y -= line_height

            # page break
            if y < 60:
                c.showPage()
                c.setFont(normal_font, 9)
                y = height - 40

        c.save()

    ### show attachments
    def _can_view_attachments(user: User, order: Order) -> bool:
        """
        –ü—Ä–∞–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–ª–æ–∂–µ–Ω–∏–π: —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (manager) –≤–∏–¥–∏—Ç –≤—Å–µ.
        Dispatcher –≤–∏–¥–∏—Ç –∑–∞—è–≤–∫–∏ –≥–¥–µ –æ–Ω dispatcher.
        Driver ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏.
        """
        if not user or not order:
            return False
        if int(user.role) == int(UserRole.MANAGER):
            return True
        if int(user.role) == int(UserRole.DISPATCHER):
            return (order.dispatcher and order.dispatcher.id == user.id)
        if int(user.role) == int(UserRole.DRIVER):
            return (order.driver and order.driver.id == user.id)
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∑–∞–ø—Ä–µ—Ç
        return False

    def _send_attachments_list(chat_id: int, order: Order):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–ª–æ–∂–µ–Ω–∏–π (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã) –ø–æ –∑–∞—è–≤–∫–µ order –≤ chat_id.
        –ï—Å–ª–∏ attachments –Ω–µ—Ç ‚Äî —Å–æ–æ–±—â–∞–µ—Ç.
        """
        atts = list(Attachment.select().where(Attachment.order == order))
        if not atts:
            bot.send_message(chat_id, f"üìé –í –∑–∞—è–≤–∫–µ #{order.id} –Ω–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–π.")
            return

        bot.send_message(chat_id, f"üìé –í–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{order.id} ({len(atts)}):")
        for a in atts:
            uploader = a.uploaded_by.first_name if getattr(a, "uploaded_by", None) else "‚Äî"
            caption = (a.caption or "").strip()
            meta = f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {uploader}"
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ created_at
            if getattr(a, "created_at", None):
                meta += f" | {a.created_at.strftime('%d.%m.%Y %H:%M')}"
            full_caption = (caption + "\n\n" + meta).strip()
            try:
                if a.file_type == "image":
                    bot.send_photo(chat_id, a.file_id, caption=full_caption)
                else:
                    bot.send_document(chat_id, a.file_id, caption=full_caption)
            except Exception as e:
                logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ %s: %s", getattr(a, "id", "?"), e)
                # –í–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                bot.send_message(chat_id, f"[–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Ñ–∞–π–ª]\n{full_caption}")

    # -------------------- INLINE: –ø–æ–∫–∞–∑–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ --------------------
    @bot.callback_query_handler(func=lambda c: c.data.startswith("show_attachments:"))
    def cb_show_attachments_inline(call: types.CallbackQuery):
        """
        Inline callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–ª–æ–∂–µ–Ω–∏–π –ø–æ –∑–∞—è–≤–∫–µ.
        callback_data: show_attachments:{order_id}
        """
        bot.answer_callback_query(call.id)
        try:
            order_id = int(call.data.split(":", 1)[1])
        except Exception:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞—è–≤–∫–∏.")
            return

        order = Order.get_or_none(Order.id == order_id)
        user = User.get_or_none(User.tg_id == call.from_user.id)
        if not order:
            bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        if not _can_view_attachments(user, order):
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏.")
            return

        _send_attachments_list(call.message.chat.id, order)

    # -------------------- REPLY FLOW: –∫–Ω–æ–ø–∫–∞ "üìé –í–ª–æ–∂–µ–Ω–∏—è" --------------------
    @bot.message_handler(func=lambda m: m.text == "üìé –í–ª–æ–∂–µ–Ω–∏—è")
    def attachments_entry(message: types.Message):
        """
        Reply-–∫–Ω–æ–ø–∫–∞: –∑–∞–ø—É—Å–∫–∞–µ—Ç flow, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç ID –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–ª–æ–∂–µ–Ω–∏–π.
        """
        user = User.get_or_none(User.tg_id == message.from_user.id)
        if not user:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return

        bot.set_state(message.from_user.id, message.chat.id, RequestsStates.show_attachments)
        bot.send_message(message.chat.id, "üîé –í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123 –∏–ª–∏ #123):")

    @bot.message_handler(state=RequestsStates.show_attachments, content_types=["text"])
    def attachments_input(message: types.Message):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ ID –∑–∞—è–≤–∫–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–æ.
        """
        user = User.get_or_none(User.tg_id == message.from_user.id)
        if not user:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            bot.delete_state(message.from_user.id, message.chat.id)
            return

        oid = _parse_order_id(message.text)
        if not oid:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /stop.")
            return

        order = Order.get_or_none(Order.id == oid)
        if not order:
            bot.send_message(message.chat.id, f"‚ùå –ó–∞—è–≤–∫–∞ #{oid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            bot.delete_state(message.from_user.id, message.chat.id)
            return

        if not _can_view_attachments(user, order):
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏.")
            bot.delete_state(message.from_user.id, message.chat.id)
            return

        _send_attachments_list(message.chat.id, order)
        bot.delete_state(message.from_user.id, message.chat.id)

    # -------------------- HANDLERS --------------------

    @bot.message_handler(func=lambda m: m.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤")
    def msg_export_menu(message: types.Message):
        """
        –°—Ç–∞—Ä—Ç: –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞.
        """
        user = _get_user_from_update(message)
        if not user:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if int(user.role) not in (int(UserRole.DISPATCHER), int(UserRole.MANAGER)):
            bot.send_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É/—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é.")
            return

        kb = types.InlineKeyboardMarkup(row_width=2)
        kb.add(
            types.InlineKeyboardButton("üóì –ù–µ–¥–µ–ª—è", callback_data="export_period:week"),
            types.InlineKeyboardButton("üóì –ú–µ—Å—è—Ü", callback_data="export_period:month"),
            types.InlineKeyboardButton("üìä –í—Å—ë", callback_data="export_period:all"),
        )
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:", reply_markup=kb)

    @bot.callback_query_handler(func=lambda c: c.data.startswith("export_period:"))
    def cb_export_period(call: types.CallbackQuery):
        """
        –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ (Excel / PDF).
        """
        bot.answer_callback_query(call.id)
        user = _get_user_from_update(call)
        if not user:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if int(user.role) not in (int(UserRole.DISPATCHER), int(UserRole.MANAGER)):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return

        _, period = call.data.split(":", 1)
        kb = types.InlineKeyboardMarkup(row_width=2)
        kb.add(
            types.InlineKeyboardButton("üìë Excel", callback_data=f"export_do:{period}:excel"),
            types.InlineKeyboardButton("üìÑ PDF", callback_data=f"export_do:{period}:pdf"),
        )
        try:
            bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:", call.message.chat.id, call.message.message_id, reply_markup=kb)
        except Exception:
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:", reply_markup=kb)

    @bot.callback_query_handler(func=lambda c: c.data.startswith("export_do:"))
    def cb_export_do(call: types.CallbackQuery):
        """
        –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∞–π–ª (Excel –∏–ª–∏ PDF) –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.
        –§–∞–π–ª —Å–Ω–∞—á–∞–ª–∞ –ø–∏—à–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ bot.send_document(open(tmp_path,'rb')).
        """
        bot.answer_callback_query(call.id)
        user = _get_user_from_update(call)
        if not user:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if int(user.role) not in (int(UserRole.DISPATCHER), int(UserRole.MANAGER)):
            bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return

        try:
            _, period, fmt = call.data.split(":", 2)
        except Exception:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
            return

        orders = _fetch_orders_for_user(user, period)
        if not orders:
            bot.send_message(call.message.chat.id, "üì≠ –ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.")
            return

        # —Å–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
        suffix = ".xlsx" if fmt == "excel" else ".pdf"
        tmp = tempfile.NamedTemporaryFile(prefix=f"orders_{period}_", suffix=suffix, delete=False)
        tmp_path = tmp.name
        tmp.close()  # –º—ã –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ –Ω–µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ

        try:
            if fmt == "excel":
                _generate_excel_file(orders, tmp_path)
            elif fmt == "pdf":
                _generate_pdf_file(orders, tmp_path)
            else:
                bot.send_message(call.message.chat.id, "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.")
                try:
                    os.remove(tmp_path)
                except Exception:
                    pass
                return

            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª (–æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–∫ rb)
            with open(tmp_path, "rb") as f:
                # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º keyword 'filename' —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                bot.send_document(call.message.chat.id, f)

        except Exception as e:
            # –ª–æ–≥–∏—Ä—É–µ–º –∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")
            except Exception:
                pass
            raise

        finally:
            # —á–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(tmp_path)
            except Exception:
                pass

# handlers/attachments_reports.py
# import io
# from reportlab.pdfgen import canvas
# import xlsxwriter
#
# from datetime import datetime, timedelta
# from telebot import TeleBot, types
# from openpyxl import Workbook
# from reportlab.lib.pagesizes import A4
# from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table
# from reportlab.lib.styles import getSampleStyleSheet
#
# from database.models import User, Order, Attachment, OrderStatusHistory, OrderMessage, OrderStatus, UserRole
# from states.request_states import RequestsStates
# import logging
#
# logger = logging.getLogger(__name__)
#
#
# def register_attachments_reports_handlers(bot: TeleBot):
#     """
#     –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç:
#       - reply-flow: 'üìé –í–ª–æ–∂–µ–Ω–∏—è' -> –≤–≤–æ–¥ ID –∑–∞—è–≤–∫–∏ -> –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–∏–π
#       - inline callback: 'show_attachments:{order_id}' -> –≤—ã–≤–µ—Å—Ç–∏ –≤–ª–æ–∂–µ–Ω–∏—è –ø–æ –∑–∞—è–≤–∫–µ
#       - —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ (Excel / PDF) —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥
#       - –∫–æ–º–∞–Ω–¥–∞/–∫–Ω–æ–ø–∫–∞ 'üìö –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è' ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é: –ø–æ–ª—É—á–∞–µ—Ç Excel —Å —á–∞—Ç–∞–º–∏ –∏ –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
#     """
#     # -------------------- –≠–ö–°–ü–û–†–¢: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ --------------------
#     def _export_period_kb():
#         """
#         Inline keyboard –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞.
#         """
#         kb = types.InlineKeyboardMarkup(row_width=1)
#         kb.add(
#             types.InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="export_period:7"),
#             types.InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data="export_period:30"),
#         )
#         kb.add(
#             types.InlineKeyboardButton("–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data="export_period:all"),
#             types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", callback_data="export_period:custom"),
#         )
#         return kb
#
#     @bot.message_handler(func=lambda m: m.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤")
#     def export_entry(message: types.Message):
#         """
#         Reply-–∫–Ω–æ–ø–∫–∞ '–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤' ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞.
#         –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.
#         """
#         user = User.get_or_none(User.tg_id == message.from_user.id)
#         if not user or int(user.role) not in (int(UserRole.DISPATCHER), int(UserRole.MANAGER)):
#             bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É/—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é.")
#             return
#
#         bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=_export_period_kb())
#
#     def _format_orders(period: str):
#         """
#         –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç queryset –∑–∞–∫–∞–∑–æ–≤ –ø–æ –ø–µ—Ä–∏–æ–¥—É.
#         """
#         now = datetime.now()
#         if period == "week":
#             since = now - timedelta(days=7)
#             q = Order.select().where(Order.datetime >= since).order_by(Order.datetime.desc())
#         elif period == "month":
#             since = now - timedelta(days=30)
#             q = Order.select().where(Order.datetime >= since).order_by(Order.datetime.desc())
#         else:  # all
#             q = Order.select().order_by(Order.datetime.desc())
#         return list(q)
#
#     def _export_excel(orders: list[Order]) -> io.BytesIO:
#         """
#         –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel (xlsx) —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏ –∑–∞–∫–∞–∑–æ–≤.
#         """
#         output = io.BytesIO()
#         workbook = xlsxwriter.Workbook(output, {"in_memory": True})
#         ws = workbook.add_worksheet("Orders")
#
#         headers = ["ID", "–î–∞—Ç–∞", "–û—Ç–∫—É–¥–∞", "–ö—É–¥–∞", "–°—Ç–∞—Ç—É—Å", "–í–æ–¥–∏—Ç–µ–ª—å", "–î–∏—Å–ø–µ—Ç—á–µ—Ä"]
#         for col, h in enumerate(headers):
#             ws.write(0, col, h)
#
#         for row, o in enumerate(orders, start=1):
#             ws.write(row, 0, o.id)
#             ws.write(row, 1, o.datetime.strftime("%d.%m.%Y %H:%M") if o.datetime else "")
#             ws.write(row, 2, o.from_addr or "")
#             ws.write(row, 3, o.to_addr or "")
#             ws.write(row, 4, OrderStatus(o.status).label if o.status else "")
#             ws.write(row, 5, f"{o.driver if o.driver else ''} {o.driver.last_name if o.driver else ''}")
#             ws.write(row, 6, f"{o.dispatcher if o.dispatcher else ''}")
#
#         workbook.close()
#         output.seek(0)
#         return output
#
#     def _export_pdf(orders: list[Order]) -> io.BytesIO:
#         """
#         –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF (A4) —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏ –∑–∞–∫–∞–∑–æ–≤.
#         """
#         output = io.BytesIO()
#         c = canvas.Canvas(output, pagesize=A4)
#         width, height = A4
#         y = height - 40
#
#         c.setFont("Helvetica-Bold", 14)
#         c.drawString(40, y, "–û—Ç—á—ë—Ç –ø–æ –∑–∞—è–≤–∫–∞–º")
#         y -= 30
#
#         c.setFont("Helvetica", 10)
#         for o in orders:
#             line = (
#                 f"#{o.id} | {o.datetime.strftime('%d.%m.%Y %H:%M') if o.datetime else '‚Äî'} | "
#                 f"{o.from_addr or '‚Äî'} ‚Üí {o.to_addr or '‚Äî'} | "
#                 f"{OrderStatus(o.status).label if o.status else '‚Äî'} | "
#                 f"–í–æ–¥–∏—Ç–µ–ª—å: {o.driver.first_name if o.driver else '‚Äî'} | "
#                 f"–î–∏—Å–ø–µ—Ç—á–µ—Ä: {o.dispatcher.first_name if o.dispatcher else '‚Äî'}"
#             )
#             c.drawString(40, y, line)
#             y -= 15
#             if y < 40:
#                 c.showPage()
#                 y = height - 40
#                 c.setFont("Helvetica", 10)
#
#         c.save()
#         output.seek(0)
#         return output
#
#         # --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
#
#     @bot.message_handler(func=lambda m: m.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–æ–≤")
#     def msg_export_menu(message: types.Message):
#         """
#         –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞: –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞.
#         """
#         kb = types.InlineKeyboardMarkup(row_width=2)
#         kb.add(
#             types.InlineKeyboardButton("üóì –ù–µ–¥–µ–ª—è", callback_data="export_period:week"),
#             types.InlineKeyboardButton("üóì –ú–µ—Å—è—Ü", callback_data="export_period:month"),
#             types.InlineKeyboardButton("üìä –í—Å—ë", callback_data="export_period:all"),
#         )
#         bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:", reply_markup=kb)
#
#     @bot.callback_query_handler(func=lambda c: c.data.startswith("export_period:"))
#     def cb_export_period(call: types.CallbackQuery):
#         """
#         –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç (Excel/PDF).
#         """
#         _, period = call.data.split(":", 1)
#         kb = types.InlineKeyboardMarkup(row_width=2)
#         kb.add(
#             types.InlineKeyboardButton("üìë Excel", callback_data=f"export_format:{period}:excel"),
#             types.InlineKeyboardButton("üìÑ PDF", callback_data=f"export_format:{period}:pdf"),
#         )
#         bot.edit_message_text(
#             "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
#             call.message.chat.id,
#             call.message.message_id,
#             reply_markup=kb,
#         )
#
#     @bot.callback_query_handler(func=lambda c: c.data.startswith("export_format:"))
#     def cb_export_format(call: types.CallbackQuery):
#         """
#         –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –æ—Ç—á—ë—Ç–∞.
#         """
#         _, period, fmt = call.data.split(":", 2)
#         orders = _format_orders(period)
#
#         if not orders:
#             bot.answer_callback_query(call.id, "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
#             return
#
#         if fmt == "excel":
#             file = _export_excel(orders)
#             bot.send_document(call.message.chat.id, file, visible_file_name=f"orders_{period}.xlsx")
#         elif fmt == "pdf":
#             file = _export_pdf(orders)
#             bot.send_document(call.message.chat.id, file, visible_file_name=f"orders_{period}.pdf")
#         else:
#             bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
#
#     # --- –∫–æ–Ω–µ—Ü register_attachments_reports_handlers ---