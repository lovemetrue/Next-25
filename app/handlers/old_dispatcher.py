# handlers/dispatcher.py
from telebot import TeleBot, types
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
from database.models import (
    User, Order, OrderStatus, UserRole, OrderPrefix, Attachment, OrderStatusHistory
)
from keyboards.request_actions import (
    get_prefix_keyboard,
    get_drivers_keyboard,
    get_request_filter_keyboard,
    get_request_actions_keyboard
)
import logging
from keyboards.main_menu import get_main_menu
from peewee import fn
from states.request_states import RequestsStates

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("logs/bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

PREFIX_MAP = {
    "—Å –Ω–¥—Å": OrderPrefix.WITH_VAT,
    "–±–µ–∑ –Ω–¥—Å": OrderPrefix.WITHOUT_VAT,
    "–Ω–∞–ª": OrderPrefix.CASH,
}


def register_dispatcher_handlers(bot: TeleBot):
    # ----------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï -----------------

    def _parse_order_id_from_text(text: str) -> int | None:
        # —Ä–µ–∑–µ—Ä–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
        try:
            hash_pos = text.find("#")
            if hash_pos == -1:
                return None
            num = ""
            for ch in text[hash_pos + 1:]:
                if ch.isdigit():
                    num += ch
                else:
                    break
            return int(num) if num else None
        except Exception:
            return None

    def _status_to_keyboard_code(status: int) -> str:
        mapping = {
            OrderStatus.NEW: "new",
            OrderStatus.CONFIRMED: "confirmed",
            OrderStatus.ENROUTE_TO_LOADING: "enroute_to_loading",
            OrderStatus.LOADING: "loading",
            OrderStatus.ENROUTE: "in_transit",
            OrderStatus.DELIVERED: "delivered",
            OrderStatus.CANCELLED: "cancelled",
        }
        return mapping.get(OrderStatus(status), "new")

    STATUS_TEXT_TO_ENUM = {
        "üÜï –ù–æ–≤—ã–µ": OrderStatus.NEW,
        "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ": OrderStatus.CONFIRMED,
        "üöõ –í –ø—É—Ç–∏": OrderStatus.ENROUTE,
        "üì¶ –ù–∞ –∑–∞–≥—Ä—É–∑–∫–µ": OrderStatus.LOADING,
        "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ": OrderStatus.DELIVERED,
        "‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ": OrderStatus.CANCELLED,
    }

    def _format_order_brief(o: Order) -> str:
        # –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ datetime (–∫–∞–∫ –≤ —Ç–≤–æ–∏—Ö –º–æ–¥–µ–ª—è—Ö)
        base = (f"üöõ –ó–∞—è–≤–∫–∞ #{o.id}\n"
                f"–°—Ç–∞—Ç—É—Å: {OrderStatus(o.status).label}\n"
                f"{o.from_addr} ‚Üí {o.to_addr}\n"
                f"üïí {o.datetime.strftime('%d.%m.%Y %H:%M')}")
        if o.status == int(OrderStatus.CANCELLED) and o.cancel_reason:
            base += f"\nüö´ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã: {o.cancel_reason}"
        return base

    def _ensure_dispatcher(bot: TeleBot, message: types.Message) -> User | None:
        user = User.get_or_none(User.tg_id == message.from_user.id)
        if not user or user.role != int(UserRole.DISPATCHER):
            bot.send_message(message.chat.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É.")
            return None
        return user

    def _show_dispatcher_menu(bot: TeleBot, chat_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (—Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É, –≤–æ–¥–∏—Ç–µ–ª–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)."""
        bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞:", reply_markup=get_main_menu("dispatcher"))

    def _extract_attachment_from_message(message: types.Message):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ None.
        –§–æ—Ä–º–∞—Ç: {"file_id": str, "file_type": "image"|"document", "caption": Optional[str]}
        """
        # –§–æ—Ç–æ
        if message.photo:
            return {
                "file_id": message.photo[-1].file_id,
                "file_type": "image",
                "caption": getattr(message, "caption", None)
            }

        # –î–æ–∫—É–º–µ–Ω—Ç
        if message.document:
            mt = (message.document.mime_type or "").lower()
            is_image = mt.startswith("image/")
            return {
                "file_id": message.document.file_id,
                "file_type": "image" if is_image else "document",
                "caption": getattr(message, "caption", None)
            }

        return None

    # --------------------- CREATION FLOW ---------------------

    @bot.message_handler(func=lambda m: m.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
    def create_order_start(message: types.Message):
        bot.delete_state(message.from_user.id, message.chat.id)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å –∑–∞—è–≤–∫–∏:", reply_markup=get_prefix_keyboard())
        bot.set_state(message.from_user.id, "order_prefix", message.chat.id)

    @bot.message_handler(state="order_prefix")
    def order_prefix_step(message: types.Message):
        text = (message.text or "").strip().lower()
        if text not in PREFIX_MAP:
            bot.send_message(message.chat.id, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
            return

        bot.add_data(message.from_user.id, message.chat.id, order_prefix=int(PREFIX_MAP[text]))
        drivers = User.select().where((User.role == int(UserRole.DRIVER)) & (User.is_active == True))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –ë–µ–∑ –≤–æ–¥–∏—Ç–µ–ª—è):",
                         reply_markup=get_drivers_keyboard(drivers))
        bot.set_state(message.from_user.id, "order_driver", message.chat.id)

    @bot.message_handler(state="order_driver")
    def order_driver_step(message: types.Message):
        raw = (message.text or "").strip()

        if raw == "‚ùå –ë–µ–∑ –≤–æ–¥–∏—Ç–µ–ª—è":
            bot.add_data(message.from_user.id, message.chat.id, driver_id=None)
        else:
            driver = None
            if "(" in raw and ")" in raw and "@" in raw:
                try:
                    uname = raw.split("(")[1].split(")")[0].strip()
                    if uname.startswith("@"):
                        uname = uname[1:]
                    driver = User.get_or_none((User.username == uname) & (User.role == int(UserRole.DRIVER)))
                except Exception:
                    driver = None
            if not driver:
                parts = raw.split(" (@")[0].split()
                first = parts[0] if parts else ""
                last = parts[1] if len(parts) > 1 else None
                q = User.select().where((User.role == int(UserRole.DRIVER)) & (User.first_name == first))
                if last:
                    q = q.where(User.last_name == last)
                driver = q.first()

            bot.add_data(message.from_user.id, message.chat.id, driver_id=(driver.id if driver else None))

        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–¢–æ—á–∫–∞ –ê):")
        bot.set_state(message.from_user.id, "order_from_addr", message.chat.id)

    @bot.message_handler(state="order_from_addr")
    def order_from_step(message: types.Message):
        txt = (message.text or "").strip()
        if not txt:
            bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
            return
        bot.add_data(message.from_user.id, message.chat.id, from_addr=txt)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–¢–æ—á–∫–∞ –ë):")
        bot.set_state(message.from_user.id, "order_to_addr", message.chat.id)

    @bot.message_handler(state="order_to_addr")
    def order_to_step(message: types.Message):
        txt = (message.text or "").strip()
        if not txt:
            bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.")
            return
        bot.add_data(message.from_user.id, message.chat.id, to_addr=txt)
        # –°—Ä–∞–∑—É –∫ —Ç–∏–ø—É –≥—Ä—É–∑–∞ ‚Äî —à–∞–≥ –¥–∞—Ç—ã —É–±—Ä–∞–Ω
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –≥—Ä—É–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º):")
        bot.set_state(message.from_user.id, "order_cargo", message.chat.id)

    @bot.message_handler(state="order_cargo")
    def order_cargo_step(message: types.Message):
        cargo = (message.text or "").strip() or None
        bot.add_data(message.from_user.id, message.chat.id, cargo_type=cargo)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å/–æ–±—ä—ë–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):")
        bot.set_state(message.from_user.id, "order_weight_volume", message.chat.id)

    @bot.message_handler(state="order_weight_volume")
    def order_weight_volume_step(message: types.Message):
        wv = (message.text or "").strip() or None
        bot.add_data(message.from_user.id, message.chat.id, weight_volume=wv)
        bot.send_message(message.chat.id, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):")
        bot.set_state(message.from_user.id, "order_comment", message.chat.id)

    @bot.message_handler(state="order_comment")
    def order_comment_step(message: types.Message):
        comment = (message.text or "").strip() or None
        bot.add_data(message.from_user.id, message.chat.id, comment=comment)
        bot.send_message(
            message.chat.id,
            "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.",
        )
        bot.set_state(message.from_user.id, "order_file", message.chat.id)

    @bot.message_handler(state="order_file", content_types=["text"])
    def order_file_skip_or_unknown(message: types.Message):
        text = (message.text or "").strip().lower()
        if text in ("–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip", "–Ω–µ—Ç", "–±–µ–∑ —Ñ–∞–π–ª–∞"):
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                _create_order_from_state(bot, message, data, first_file=None)
        else:
            bot.send_message(message.chat.id, "–ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, –ª–∏–±–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç.")

    @bot.message_handler(state="order_file", content_types=["photo", "document"])
    def order_file_step(message: types.Message):
        file = _extract_attachment_from_message(message)
        if file is None:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")
            return

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            _create_order_from_state(bot, message, data, first_file=file)

    def _create_order_from_state(bot: TeleBot, message: types.Message, data: dict, first_file: dict | None):
        try:
            prefix = data.get("order_prefix")
            from_addr = data.get("from_addr")
            to_addr = data.get("to_addr")
            exec_dt = data.get("datetime") or datetime.now()

            if not all([prefix, from_addr, to_addr]):
                bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: ¬´‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É¬ª.")
                return

            dispatcher = User.get_or_none(User.tg_id == message.from_user.id)
            if not dispatcher:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä.")
                return

            driver_id = data.get("driver_id")
            driver = User.get_by_id(driver_id) if driver_id else None

            order = Order.create(
                dispatcher=dispatcher,
                driver=driver,
                prefix=int(prefix),
                from_addr=from_addr,
                to_addr=to_addr,
                datetime=exec_dt,
                cargo_type=data.get("cargo_type"),
                weight_volume=data.get("weight_volume"),
                comment=data.get("comment"),
                status=int(OrderStatus.NEW),
            )

            if first_file:
                Attachment.create(
                    order=order,
                    uploaded_by=dispatcher,
                    file_id=first_file["file_id"],
                    file_type=first_file["file_type"],
                    caption=first_file.get("caption"),
                )

            bot.send_message(
                message.chat.id,
                f"‚úÖ –ó–∞—è–≤–∫–∞ #{order.id} —Å–æ–∑–¥–∞–Ω–∞: ¬´{from_addr} ‚Üí {to_addr}¬ª\n"
                f"üïí –î–∞—Ç–∞: {exec_dt.strftime('%d.%m.%Y %H:%M')}\n"
                f"üöõ –í–æ–¥–∏—Ç–µ–ª—å: {(driver.first_name + (' ' + (driver.last_name or ''))).strip() if driver else '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}"
            )

            bot.delete_state(message.from_user.id, message.chat.id)
            bot.send_message(message.chat.id, f"–í–∞—à–µ –º–µ–Ω—é:", reply_markup=get_main_menu("dispatcher"))

        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            raise

    # ====== üë®‚Äçüíº –í–û–î–ò–¢–ï–õ–ò (—Å–ø–∏—Å–æ–∫ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏) ======
    @bot.message_handler(func=lambda m: m.text == "üë®‚Äçüíº –í–æ–¥–∏—Ç–µ–ª–∏")
    def list_drivers(message: types.Message):
        dispatcher = _ensure_dispatcher(bot, message)
        if not dispatcher:
            return

        drivers = User.select().where((User.role == int(UserRole.DRIVER)) & (User.is_active == True)).order_by(
            User.first_name, User.last_name)
        if not drivers:
            bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π.")
            return

        for d in drivers:
            active_cnt = (Order.select()
                          .where((Order.driver == d) &
                                 (Order.status.not_in([int(OrderStatus.DELIVERED), int(OrderStatus.CANCELLED)])))
                          .count())
            uname = f"@{d.username}" if d.username else ""
            caption = f"üë®‚Äçüíº {d.first_name or ''} {d.last_name or ''} {uname}".strip()
            caption += f"\nüöö –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {active_cnt}"

            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üì¶ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏", callback_data=f"driver_orders:{d.id}"))
            bot.send_message(message.chat.id, caption, reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data.startswith("driver_orders:"))
    def cb_driver_orders(call: types.CallbackQuery):
        try:
            driver_id = int(call.data.split(":")[1])
        except Exception:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.")
            return

        driver = User.get_or_none(User.id == driver_id)
        if not driver:
            bot.answer_callback_query(call.id, "–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        orders = (Order.select()
                  .where((Order.driver == driver) &
                         (Order.status.not_in([int(OrderStatus.DELIVERED), int(OrderStatus.CANCELLED)])))
                  .order_by(Order.datetime))
        if not orders:
            bot.send_message(call.message.chat.id,
                             f"–£ –≤–æ–¥–∏—Ç–µ–ª—è {driver.first_name or ''} {driver.last_name or ''} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
            return

        for o in orders:
            markup = get_request_actions_keyboard(o, "dispatcher")
            bot.send_message(
                call.message.chat.id,
                _format_order_brief(o),
                reply_markup=markup
            )
        bot.answer_callback_query(call.id)

    # ====== üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞) ======
    @bot.message_handler(func=lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    def dispatcher_stats(message: types.Message):
        dispatcher = _ensure_dispatcher(bot, message)
        if not dispatcher:
            return

        total = Order.select().where(Order.dispatcher == dispatcher).count()
        by_status = (Order
                     .select(Order.status, fn.COUNT(Order.id).alias("cnt"))
                     .where(Order.dispatcher == dispatcher)
                     .group_by(Order.status))

        status_counts = {OrderStatus(s.status).label: s.cnt for s in by_status}
        delivered_week = (Order.select()
                          .where((Order.dispatcher == dispatcher) &
                                 (Order.status == int(OrderStatus.DELIVERED)) &
                                 (Order.datetime >= datetime.now() - timedelta(days=7)))
                          .count())
        delivered_month = (Order.select()
                           .where((Order.dispatcher == dispatcher) &
                                  (Order.status == int(OrderStatus.DELIVERED)) &
                                  (Order.datetime >= datetime.now() - timedelta(days=30)))
                           .count())

        top_drivers = (Order
                       .select(Order.driver, fn.COUNT(Order.id).alias("cnt"))
                       .where((Order.dispatcher == dispatcher) & (Order.status == int(OrderStatus.DELIVERED)) & (
            Order.driver.is_null(False)))
                       .group_by(Order.driver)
                       .order_by(fn.COUNT(Order.id).desc())
                       .limit(5))

        lines = [
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞—à–∏–º –∑–∞—è–≤–∫–∞–º",
            f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}",
            "",
            "–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:",
        ]
        if status_counts:
            for name, cnt in status_counts.items():
                lines.append(f"‚Ä¢ {name}: {cnt}")
        else:
            lines.append("‚Ä¢ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        lines += [
            "",
            f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞ 7 –¥–Ω–µ–π: {delivered_week}",
            f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞ 30 –¥–Ω–µ–π: {delivered_month}",
            "",
            "üèÜ –¢–æ–ø –≤–æ–¥–∏—Ç–µ–ª–µ–π (–¥–æ—Å—Ç–∞–≤–æ–∫):"
        ]
        if top_drivers:
            for row in top_drivers:
                d = row.driver
                lines.append(f"‚Ä¢ {d.first_name or ''} {d.last_name or ''} ‚Äî {row.cnt}")
        else:
            lines.append("‚Ä¢ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        bot.send_message(message.chat.id, "\n".join(lines))

    # ====== –ú–û–ò –ó–ê–Ø–í–ö–ò (inline —Ñ–∏–ª—å—Ç—Ä—ã: –ù–µ–¥–µ–ª—è / –í—Å–µ) ======
    @bot.message_handler(func=lambda m: m.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
    def show_my_orders_menu(message: types.Message):
        user = User.get_or_none(User.tg_id == message.from_user.id)
        if not user:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return
        if user.role != int(UserRole.DISPATCHER):
            bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É.")
            return

        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("üóì –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="orders_week"),
            InlineKeyboardButton("üìä –í—Å–µ", callback_data="orders_all")
        )
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data == "orders_week")
    def cb_orders_week(call: types.CallbackQuery):
        bot.answer_callback_query(call.id)
        user = User.get_or_none(User.tg_id == call.from_user.id)
        if not user:
            bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        week_ago = datetime.now() - timedelta(days=7)
        orders = (Order
                  .select()
                  .where((Order.dispatcher == user) & (Order.datetime >= week_ago))
                  .order_by(Order.datetime.desc()))

        if not orders:
            bot.send_message(call.message.chat.id, "üì≠ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.")
            return

        for order in orders:
            _send_order_card(bot, call.message.chat.id, order, role="dispatcher")
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda c: c.data == "orders_all")
    def cb_orders_all(call: types.CallbackQuery):
        bot.answer_callback_query(call.id)
        user = User.get_or_none(User.tg_id == call.from_user.id)
        if not user:
            bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        orders = (Order
                  .select()
                  .where(Order.dispatcher == user)
                  .order_by(Order.datetime.desc()))

        if not orders:
            bot.send_message(call.message.chat.id, "üì≠ –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
            return

        for order in orders:
            _send_order_card(bot, call.message.chat.id, order, role="dispatcher")
        bot.answer_callback_query(call.id)

    def _send_order_card(bot: TeleBot, chat_id: int, order: Order, role="dispatcher"):
        status_map = {
            OrderStatus.NEW: "üÜï –ù–æ–≤–∞—è",
            OrderStatus.CONFIRMED: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
            OrderStatus.ENROUTE: "üöõ –í –ø—É—Ç–∏",
            OrderStatus.LOADING: "üì¶ –ù–∞ –∑–∞–≥—Ä—É–∑–∫–µ",
            OrderStatus.DELIVERED: "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–∞",
            OrderStatus.CANCELLED: "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞",
        }
        status_text = status_map.get(order.status, "‚ùî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        text = (
            f"üìã –ó–∞—è–≤–∫–∞ #{order.id}\n"
            f"‚û°Ô∏è {order.from_addr} ‚Üí {order.to_addr}\n"
            f"üìÖ {order.datetime.strftime('%d.%m.%Y %H:%M')}\n"
            f"üö¶ –°—Ç–∞—Ç—É—Å: {status_text}"
        )
        # –ø–µ—Ä–µ–¥–∞—ë–º —Å–∞–º –æ–±—ä–µ–∫—Ç order, —á—Ç–æ–±—ã keyboard —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∞ callback_data —Å id
        markup = get_request_actions_keyboard(order, role)
        bot.send_message(chat_id, text, reply_markup=markup)

    # ========== HANDLERS FOR EDIT / ASSIGN / CANCEL (callback_data includes order_id) ==========

    @bot.callback_query_handler(func=lambda c: c.data.startswith("edit_request:"))
    def cb_edit_request(call: types.CallbackQuery):
        try:
            order_id = int(call.data.split(":")[1])
        except Exception:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞—è–≤–∫–∏.")
            return

        order = Order.get_or_none(Order.id == order_id)
        if not order:
            bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        if order.status not in [int(OrderStatus.NEW), int(OrderStatus.CONFIRMED)]:
            bot.answer_callback_query(call.id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö.")
            return

        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("üìç –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ—á–∫—É –ê", callback_data=f"edit_from:{order.id}"),
            types.InlineKeyboardButton("üìç –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ—á–∫—É –ë", callback_data=f"edit_to:{order.id}"),
        )
        markup.add(
            types.InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è", callback_data=f"edit_dt:{order.id}"),
            types.InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"edit_comment:{order.id}"),
        )
        markup.add(
            types.InlineKeyboardButton("üì¶ –¢–∏–ø –≥—Ä—É–∑–∞", callback_data=f"edit_cargo:{order.id}"),
            types.InlineKeyboardButton("‚öñÔ∏è –í–µ—Å/–æ–±—ä–µ–º", callback_data=f"edit_weight:{order.id}"),
        )
        markup.add(
            types.InlineKeyboardButton("üë®‚Äçüíº –ù–∞–∑–Ω–∞—á–∏—Ç—å/—Å–º–µ–Ω–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è", callback_data=f"assign_driver:{order.id}"),
        )
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, f"‚úèÔ∏è –ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∑–∞—è–≤–∫–µ #{order.id}?", reply_markup=markup)

    # --- edit_from ---
    @bot.callback_query_handler(func=lambda c: c.data.startswith("edit_from:"))
    def cb_edit_from(call: types.CallbackQuery):
        order_id = int(call.data.split(":")[1])
        bot.set_state(call.from_user.id, f"edit_from:{order_id}", call.message.chat.id)
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –ê:")
        bot.answer_callback_query(call.id)

    @bot.message_handler(state=lambda s: s and s.startswith("edit_from:"))
    def edit_from_step(message: types.Message):
        state = bot.get_state(message.from_user.id, message.chat.id) or ""
        order_id = int(state.split(":")[1])
        order = Order.get_or_none(Order.id == order_id)
        if not order:
            bot.send_message(message.chat.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            order.from_addr = message.text.strip()
            order.save()
            OrderStatusHistory.create(order=order, by_user=User.get(User.tg_id == message.from_user.id),
                                      status=order.status, note="–ò–∑–º–µ–Ω–µ–Ω–∞ —Ç–æ—á–∫–∞ –ê")
            bot.send_message(message.chat.id, f"‚úÖ –¢–æ—á–∫–∞ –ê –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{order.id}")
        bot.delete_state(message.from_user.id, message.chat.id)

    # --- edit_to ---
    @bot.callback_query_handler(func=lambda c: c.data.startswith("edit_to:"))
    def cb_edit_to(call: types.CallbackQuery):
        order_id = int(call.data.split(":")[1])
        bot.set_state(call.from_user.id, f"edit_to:{order_id}", call.message.chat.id)
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –ë:")
        bot.answer_callback_query(call.id)

    @bot.message_handler(state=lambda s: s and s.startswith("edit_to:"))
    def edit_to_step(message: types.Message):
        state = bot.get_state(message.from_user.id, message.chat.id) or ""
        order_id = int(state.split(":")[1])
        order = Order.get_or_none(Order.id == order_id)
        if not order:
            bot.send_message(message.chat.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            order.to_addr = message.text.strip()
            order.save()
            OrderStatusHistory.create(order=order, by_user=User.get(User.tg_id == message.from_user.id),
                                      status=order.status, note="–ò–∑–º–µ–Ω–µ–Ω–∞ —Ç–æ—á–∫–∞ –ë")
            bot.send_message(message.chat.id, f"‚úÖ –¢–æ—á–∫–∞ –ë –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{order.id}")
        bot.delete_state(message.from_user.id, message.chat.id)

    # --- edit_dt ---
    @bot.callback_query_handler(func=lambda c: c.data.startswith("edit_dt:"))
    def cb_edit_dt(call: types.CallbackQuery):
        order_id = int(call.data.split(":")[1])
        bot.set_state(call.from_user.id, f"edit_dt:{order_id}", call.message.chat.id)
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–î–î.MM.–ì–ì–ì–ì –ß–ß:–ú–ú):")
        bot.answer_callback_query(call.id)

    @bot.message_handler(state=lambda s: s and s.startswith("edit_dt:"))
    def edit_dt_step(message: types.Message):
        state = bot.get_state(message.from_user.id, message.chat.id) or ""
        order_id = int(state.split(":")[1])
        try:
            dt = datetime.strptime(message.text.strip(), "%d.%m.%Y %H:%M")
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: 25.08.2025 14:30")
            return
        order = Order.get_or_none(Order.id == order_id)
        if not order:
            bot.send_message(message.chat.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            order.datetime = dt
            order.save()
            OrderStatusHistory.create(order=order, by_user=User.get(User.tg_id == message.from_user.id),
                                      status=order.status, note="–ò–∑–º–µ–Ω–µ–Ω–∞ –¥–∞—Ç–∞/–≤—Ä–µ–º—è")
            bot.send_message(message.chat.id, f"‚úÖ –î–∞—Ç–∞/–≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –∑–∞—è–≤–∫–∏ #{order.id}")
        bot.delete_state(message.from_user.id, message.chat.id)

    # --- edit_comment ---
    @bot.callback_query_handler(func=lambda c: c.data.startswith("edit_comment:"))
    def cb_edit_comment(call: types.CallbackQuery):
        order_id = int(call.data.split(":")[1])
        bot.set_state(call.from_user.id, f"edit_comment:{order_id}", call.message.chat.id)
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–æ–∂–Ω–æ –ø—É—Å—Ç–æ):")
        bot.answer_callback_query(call.id)

    @bot.message_handler(state=lambda s: s and s.startswith("edit_comment:"))
    def edit_comment_step(message: types.Message):
        state = bot.get_state(message.from_user.id, message.chat.id) or ""
        order_id = int(state.split(":")[1])
        order = Order.get_or_none(Order.id == order_id)
        if not order:
            bot.send_message(message.chat.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            order.comment = (message.text or "").strip() or None
            order.save()
            OrderStatusHistory.create(order=order, by_user=User.get(User.tg_id == message.from_user.id),
                                      status=order.status, note="–ò–∑–º–µ–Ω–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
            bot.send_message(message.chat.id, f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –∑–∞—è–≤–∫–∏ #{order.id}")
        bot.delete_state(message.from_user.id, message.chat.id)

    # --- edit_cargo ---
    @bot.callback_query_handler(func=lambda c: c.data.startswith("edit_cargo:"))
    def cb_edit_cargo(call: types.CallbackQuery):
        order_id = int(call.data.split(":")[1])
        bot.set_state(call.from_user.id, f"edit_cargo:{order_id}", call.message.chat.id)
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –≥—Ä—É–∑–∞ (–º–æ–∂–Ω–æ –ø—É—Å—Ç–æ):")
        bot.answer_callback_query(call.id)

    @bot.message_handler(state=lambda s: s and s.startswith("edit_cargo:"))
    def edit_cargo_step(message: types.Message):
        state = bot.get_state(message.from_user.id, message.chat.id) or ""
        order_id = int(state.split(":")[1])
        order = Order.get_or_none(Order.id == order_id)
        if not order:
            bot.send_message(message.chat.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            order.cargo_type = (message.text or "").strip() or None
            order.save()
            OrderStatusHistory.create(order=order, by_user=User.get(User.tg_id == message.from_user.id),
                                      status=order.status, note="–ò–∑–º–µ–Ω–µ–Ω —Ç–∏–ø –≥—Ä—É–∑–∞")
            bot.send_message(message.chat.id, f"‚úÖ –¢–∏–ø –≥—Ä—É–∑–∞ –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –∑–∞—è–≤–∫–∏ #{order.id}")
        bot.delete_state(message.from_user.id, message.chat.id)

    # --- edit_weight ---
    @bot.callback_query_handler(func=lambda c: c.data.startswith("edit_weight:"))
    def cb_edit_weight(call: types.CallbackQuery):
        order_id = int(call.data.split(":")[1])
        bot.set_state(call.from_user.id, f"edit_weight:{order_id}", call.message.chat.id)
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å/–æ–±—ä–µ–º (—Å—Ç—Ä–æ–∫–∞, –º–æ–∂–Ω–æ –ø—É—Å—Ç–æ):")
        bot.answer_callback_query(call.id)

    @bot.message_handler(state=lambda s: s and s.startswith("edit_weight:"))
    def edit_weight_step(message: types.Message):
        state = bot.get_state(message.from_user.id, message.chat.id) or ""
        order_id = int(state.split(":")[1])
        order = Order.get_or_none(Order.id == order_id)
        if not order:
            bot.send_message(message.chat.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            order.weight_volume = (message.text or "").strip() or None
            order.save()
            OrderStatusHistory.create(order=order, by_user=User.get(User.tg_id == message.from_user.id),
                                      status=order.status, note="–ò–∑–º–µ–Ω—ë–Ω –≤–µ—Å/–æ–±—ä–µ–º")
            bot.send_message(message.chat.id, f"‚úÖ –í–µ—Å/–æ–±—ä–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –∑–∞—è–≤–∫–∏ #{order.id}")
        bot.delete_state(message.from_user.id, message.chat.id)

    # ====== –ù–∞–∑–Ω–∞—á–∏—Ç—å/–ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è ======
    @bot.callback_query_handler(func=lambda c: c.data.startswith("assign_driver:"))
    def cb_assign_driver(call: types.CallbackQuery):
        order_id = int(call.data.split(":")[1])
        drivers = User.select().where((User.role == int(UserRole.DRIVER)) & (User.is_active == True))
        bot.set_state(call.from_user.id, f"assign_driver:{order_id}", call.message.chat.id)
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=get_drivers_keyboard(drivers))
        bot.answer_callback_query(call.id)

    @bot.message_handler(state=lambda s: s and s.startswith("assign_driver:"))
    def assign_driver_step(message: types.Message):
        state = bot.get_state(message.from_user.id, message.chat.id) or ""
        order_id = int(state.split(":")[1])

        raw = (message.text or "").strip()
        driver = None
        if "(" in raw and ")" in raw and "@" in raw:
            try:
                uname = raw.split("(")[1].split(")")[0].strip()
                if uname.startswith("@"):
                    uname = uname[1:]
                driver = User.get_or_none((User.username == uname) & (User.role == int(UserRole.DRIVER)))
            except Exception:
                driver = None
        if not driver:
            parts = raw.split(" (@")[0].split()
            first = parts[0] if parts else ""
            last = parts[1] if len(parts) > 1 else None
            q = User.select().where((User.role == int(UserRole.DRIVER)) & (User.first_name == first))
            if last:
                q = q.where(User.last_name == last)
            driver = q.first()

        order = Order.get_or_none(Order.id == order_id)
        if not order:
            bot.send_message(message.chat.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            order.driver = driver
            if order.status == int(OrderStatus.NEW):
                order.status = int(OrderStatus.CONFIRMED)
            order.save()
            OrderStatusHistory.create(order=order, by_user=User.get(User.tg_id == message.from_user.id),
                                      status=order.status, note=f"–ù–∞–∑–Ω–∞—á–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å: {driver.first_name if driver else '‚Äî'}")
            bot.send_message(message.chat.id, f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –∑–∞—è–≤–∫–∏ #{order.id}")
        bot.delete_state(message.from_user.id, message.chat.id)

    # ====== –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ (—Å –ø—Ä–∏—á–∏–Ω–æ–π) ======
    @bot.callback_query_handler(func=lambda c: c.data.startswith("cancel_request:"))
    def cb_cancel_request(call: types.CallbackQuery):
        order_id = int(call.data.split(":")[1])
        order = Order.get_or_none(Order.id == order_id)
        if not order:
            bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        if order.status not in [int(OrderStatus.NEW), int(OrderStatus.CONFIRMED)]:
            bot.answer_callback_query(call.id, "–û—Ç–º–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö.")
            return

        bot.set_state(call.from_user.id, f"cancel_reason:{order_id}", call.message.chat.id)
        bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_id}:")
        bot.answer_callback_query(call.id)

    @bot.message_handler(state=lambda s: s and s.startswith("cancel_reason:"))
    def cancel_reason_step(message: types.Message):
        state = bot.get_state(message.from_user.id, message.chat.id) or ""
        order_id = int(state.split(":")[1])
        reason = (message.text or "").strip() or "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"
        order = Order.get_or_none(Order.id == order_id)
        if not order:
            bot.send_message(message.chat.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            order.status = int(OrderStatus.CANCELLED)
            order.cancel_reason = reason
            order.save()
            OrderStatusHistory.create(order=order, by_user=User.get(User.tg_id == message.from_user.id),
                                      status=order.status, note=f"–û—Ç–º–µ–Ω–µ–Ω–∞: {reason}")
            bot.send_message(message.chat.id, f"‚ùå –ó–∞—è–≤–∫–∞ #{order.id} –æ—Ç–º–µ–Ω–µ–Ω–∞.\nüö´ –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        bot.delete_state(message.from_user.id, message.chat.id)

    # ========== BACK / FILTER STATE ==========

    @bot.message_handler(state=RequestsStates.filter_orders)
    def filter_orders_step(message):
        dispatcher = _ensure_dispatcher(bot, message)
        if not dispatcher:
            return

        text = (message.text or "").strip()
        if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            bot.delete_state(message.from_user.id, message.chat.id)
            _show_dispatcher_menu(bot, message.chat.id)
            return

        # –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã) ‚Äî –º–æ–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å —Ç—É—Ç

    @bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    def handler_back_to_menu(message):
        user = User.get_or_none(User.tg_id == message.from_user.id)

        if user and user.role == int(UserRole.DISPATCHER):
            try:
                bot.delete_state(message.from_user.id, message.chat.id)
            except Exception:
                pass
            _show_dispatcher_menu(bot, message.chat.id)
            return

        if user and user.role == int(UserRole.DRIVER):
            try:
                bot.delete_state(message.from_user.id, message.chat.id)
            except Exception:
                pass
            bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu("driver"))
            return

        try:
            bot.delete_state(message.from_user.id, message.chat.id)
        except Exception:
            pass
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(None))

    # –∫–æ–Ω–µ—Ü register_dispatcher_handlers