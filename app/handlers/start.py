# handlers/start.py
import re
import logging
from loguru import logger
from datetime import datetime
from telebot import TeleBot, types
import phonenumbers  # –ø–∞–∫–µ—Ç phonenumberslite
from app.database.models import User, UserRole, db
from app.keyboards.main_menu import get_main_menu
from telebot.custom_filters import StateFilter
from telebot.handler_backends import StatesGroup, State

# === [NEW] –ø–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ –ë–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ===
try:
    # –î–æ–±–∞–≤—å –ø—Ä–æ—Å—Ç—É—é KV-–º–æ–¥–µ–ª—å –≤ database.models –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏:
    # class Setting(Model):
    #     key = CharField(unique=True)
    #     value = CharField(null=True)
    #     ...
    from database.models import Setting  # type: ignore
except Exception:
    Setting = None  # fallback –Ω–∞ in-memory

# === [NEW] –ª–∏–º–∏—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤ ===
DEFAULT_MAX_DISPATCHERS = 3
_MAX_DISPATCHERS_CACHE = DEFAULT_MAX_DISPATCHERS  # –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–æ–¥–µ–ª–∏ Setting


def _get_max_dispatchers() -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤.
    –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Setting(key='max_dispatchers'), –∏–Ω–∞—á–µ ‚Äî –∏–∑ in-memory –∫—ç—à–∞.
    """
    global _MAX_DISPATCHERS_CACHE
    if Setting is not None:
        try:
            s = Setting.get_or_none(Setting.key == "max_dispatchers")
            if s and str(s.value).strip().isdigit():
                return int(s.value)
        except Exception:
            logger.exception("Failed to read Setting(max_dispatchers)")
    return _MAX_DISPATCHERS_CACHE


def _set_max_dispatchers(n: int) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤.
    –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –º–æ–¥–µ–ª—å Setting ‚Äî –ø–∏—à–µ—Ç –≤ –ë–î, –∏–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç in-memory –∫—ç—à.
    """
    global _MAX_DISPATCHERS_CACHE
    if Setting is not None:
        try:
            s, created = Setting.get_or_create(key="max_dispatchers", defaults={"value": str(n)})
            if not created:
                s.value = str(n)
                s.save()
            return
        except Exception:
            logger.exception("Failed to upsert Setting(max_dispatchers)")
    _MAX_DISPATCHERS_CACHE = n


def _active_dispatchers_count() -> int:
    """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞."""
    try:
        return (User
                .select()
                .where((User.role == int(UserRole.DISPATCHER)) & (User.is_active == True))
                .count())
    except Exception:
        logger.exception("Failed to count active dispatchers")
        return 0


def _active_manager_exists() -> bool:
    """–ï—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ."""
    try:
        return (User
                .select()
                .where((User.role == int(UserRole.MANAGER)) & (User.is_active == True))
                .exists())
    except Exception:
        logger.exception("Failed to check active manager")
        return False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.ERROR,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("logs/bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# ====== –°–æ—Å—Ç–æ—è–Ω–∏—è FSM —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ======
class RegStates(StatesGroup):
    choose_role = State()
    phone_or_empid = State()
    confirm = State()


# ====== –ü—É–±–ª–∏—á–Ω–∞—è —Ç–æ—á–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ ======
def register_handlers(bot: TeleBot) -> None:
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç —Ö—ç–Ω–¥–ª–µ—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É —ç–∫–∑–µ–º–ø–ª—è—Ä—É TeleBot.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ —Ç–æ—á–∫–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω state_storage.
    """
    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –¥–æ–±–∞–≤–∏–º StateFilter (–±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ)
    try:
        bot.add_custom_filter(StateFilter(bot))
    except Exception as e:
        logger.debug(f"StateFilter already added or failed: {e}")

    # /start
    @bot.message_handler(commands=["start", "register"])
    def cmd_start(message: types.Message):
        """
        –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ–ª—å –∏ –º–µ–Ω—é.
        –ò–Ω–∞—á–µ ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –≤—ã–±–æ—Ä —Ä–æ–ª–∏; –∫–Ω–æ–ø–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∫—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å.
        """
        user = _get_user_by_tg(message.from_user.id)
        if user and user.is_active:
            role_name = UserRole(user.role).label
            text = (
                f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name or '–¥—Ä—É–≥'}!\n"
                f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫: <b>{role_name}</b>.\n\n"
            )
            bot.send_message(message.chat.id, text, parse_mode="HTML")
            return

        # –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        bot.set_state(message.from_user.id, RegStates.choose_role, message.chat.id)
        _ask_role(bot, message.chat.id)

        # –í—ã–±–æ—Ä —Ä–æ–ª–∏ (callback –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫)

    @bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("role:"),
                                state=RegStates.choose_role)
    def cb_choose_role(call: types.CallbackQuery):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–æ–ª–∏. –ü—Ä–∞–≤–∏–ª–∞:
          - –ï—Å–ª–∏ —Ä–æ–ª—å MANAGER —É–∂–µ –∑–∞–Ω—è—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ‚Äî –∑–∞–ø—Ä–µ—â–∞–µ–º.
          - –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω DISPATCHER –∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –æ—Å—Ç–∞—ë–º—Å—è –≤ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–∏.
        """
        role_code = call.data.split(":", 1)[1]
        try:
            role = UserRole.from_code(role_code)
        except ValueError:
            bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å.")
            return

        # –ñ—ë—Å—Ç–∫–æ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–±–æ—Ä MANAGER, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
        if role is UserRole.MANAGER and _active_manager_exists():
            bot.answer_callback_query(call.id, "‚ùå –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é —Ä–æ–ª—å.")
            # –ø–µ—Ä–µ–æ—Ç—Ä–∏—Å—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è)
            try:
                bot.edit_message_reply_markup(
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=_roles_keyboard_hide_manager()
                )
            except Exception:
                pass
            return

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω dispatcher ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if role is UserRole.DISPATCHER:
            max_d = _get_max_dispatchers()
            cur = _active_dispatchers_count()
            if cur >= max_d:
                bot.answer_callback_query(call.id,
                                          f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤: {max_d}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é.")
                return

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –∏ –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ
        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data["role"] = int(role)

        bot.answer_callback_query(call.id)
        bot.set_state(call.from_user.id, RegStates.phone_or_empid, call.message.chat.id)
        _ask_phone_or_id(bot, call.message.chat.id)

    # –ü—Ä–∏—ë–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∫–∞–∫ –∫–æ–Ω—Ç–∞–∫—Ç) –∏–ª–∏ ID (—Ç–µ–∫—Å—Ç)
    @bot.message_handler(content_types=["contact", "text"], state=RegStates.phone_or_empid)
    def msg_phone_or_id(message: types.Message):
        """
        –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ —Ç–∞–±–µ–ª—å–Ω—ã–π ID. –ù–æ–º–µ—Ä –º–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –∫–∞–∫ –∫–æ–Ω—Ç–∞–∫—Ç.
        """
        emp_id: str | None = None
        phone_e164: str | None = None

        if message.content_type == "contact" and message.contact:
            if message.contact.user_id and message.contact.user_id != message.from_user.id:
                bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä <b>—Å–≤–æ–µ–≥–æ</b> —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", parse_mode="HTML")
                return

            raw = message.contact.phone_number
            phone_e164 = _process_contact_phone(raw)
            if not phone_e164:
                bot.reply_to(message, "–ù–æ–º–µ—Ä –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567.")
                return
        else:
            raw = (message.text or "").strip()
            if _looks_like_phone(raw):
                phone_e164 = _normalize_phone(raw)
                if not phone_e164:
                    bot.reply_to(message, "–ù–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: +79991234567 –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç.")
                    return
            # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–∞–±–µ–ª—å–Ω—ã–π ID ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
            # else:
            #     if len(raw) < 3:
            #         bot.reply_to(message, "ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.")
            #         return
            #     emp_id = raw

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            if phone_e164:
                data["phone"] = phone_e164
            if emp_id:
                data["employee_id"] = emp_id
            data["first_name"] = message.from_user.first_name or ""
            data["last_name"] = message.from_user.last_name or ""
            data["username"] = message.from_user.username or ""

        bot.set_state(message.from_user.id, RegStates.confirm, message.chat.id)
        _ask_confirm(bot, message.chat.id, message.from_user.id)
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏)

    @bot.callback_query_handler(func=lambda c: c.data in ("reg:confirm", "reg:edit", "reg:cancel"),
                                state=RegStates.confirm)
    def cb_confirm(call: types.CallbackQuery):
        """
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã:
          - MANAGER ‚Äî –∑–∞–ø—Ä–µ—â–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π;
          - DISPATCHER ‚Äî –∞—Ç–æ–º–∞—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∏–º–∏—Ç –µ—â—ë –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω.
        """
        if call.data == "reg:edit":
            bot.answer_callback_query(call.id)
            bot.set_state(call.from_user.id, RegStates.phone_or_empid, call.message.chat.id)
            _ask_phone_or_id(bot, call.message.chat.id, text="–ò–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
            return

        if call.data == "reg:cancel":
            bot.answer_callback_query(call.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            bot.delete_state(call.from_user.id, call.message.chat.id)
            bot.edit_message_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", call.message.chat.id, call.message.message_id)
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            role = UserRole(int(data["role"]))
            phone = data.get("phone")
            employee_id = data.get("employee_id")
            first_name = data.get("first_name", "")
            last_name = data.get("last_name", "")
            username = data.get("username", "")

        if not phone and not employee_id:
            bot.answer_callback_query(call.id, "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.")
            return

        # –ñ—ë—Å—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ MANAGER
        if role is UserRole.MANAGER and _active_manager_exists():
            bot.answer_callback_query(call.id, "‚ùå –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω.")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏
            bot.set_state(call.from_user.id, RegStates.choose_role, call.message.chat.id)
            _ask_role(bot, call.message.chat.id)
            return

        try:
            with db.atomic():
                # –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ DISPETCHER ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
                if role is UserRole.DISPATCHER:
                    max_d = _get_max_dispatchers()
                    cur = _active_dispatchers_count()
                    if cur >= max_d:
                        bot.answer_callback_query(call.id, f"‚ùå –õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤: {max_d}.")
                        bot.set_state(call.from_user.id, RegStates.choose_role, call.message.chat.id)
                        _ask_role(bot, call.message.chat.id)
                        return

                user = _get_user_by_tg(call.from_user.id)
                if user:
                    user.role = int(role)
                    user.phone = phone
                    user.employee_id = employee_id
                    user.first_name = first_name
                    user.last_name = last_name
                    user.username = username
                    user.is_active = True
                    user.updated_at = datetime.now()
                    user.save()
                else:
                    user = User.create(
                        tg_id=call.from_user.id,
                        tg_chat_id=call.message.chat.id,
                        username=username,
                        first_name=first_name,
                        last_name=last_name,
                        role=int(role),
                        phone=phone,
                        employee_id=employee_id,
                        is_active=True,
                    )
        except Exception as e:
            logger.exception("Failed to upsert user")
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
            return

        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            text=(
                f"–†–æ–ª—å: <b>{role.label}</b>\n"
                f"{'–¢–µ–ª–µ—Ñ–æ–Ω: ' + (user.phone or '') if user.phone else ''}"
                f"{'ID: ' + (user.employee_id or '') if user.employee_id else ''}"
            ),
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode="HTML",
        )
        bot.delete_state(call.from_user.id, call.message.chat.id)
        bot.send_message(call.message.chat.id,
                         "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                         reply_markup=get_main_menu(role.name.lower()))
    # –§–æ–ª–ª–±–µ–∫ –ø–æ –æ—Ç–º–µ–Ω–µ
    @bot.message_handler(commands=["cancel"])
    def cmd_cancel(message: types.Message):
        bot.delete_state(message.from_user.id, message.chat.id)
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start.")



# # ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ UI ======
# def _ask_role(bot: TeleBot, chat_id: int):
#     kb = types.InlineKeyboardMarkup(row_width=1)
#     kb.add(
#         types.InlineKeyboardButton("üß≠ –î–∏—Å–ø–µ—Ç—á–µ—Ä", callback_data="role:dispatcher"),
#         types.InlineKeyboardButton("üöö –í–æ–¥–∏—Ç–µ–ª—å", callback_data="role:driver"),
#         types.InlineKeyboardButton("üìä –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", callback_data="role:manager"),
#     )
#     bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=kb)


def _ask_phone_or_id(bot: TeleBot, chat_id: int, text: str | None = None):
    text = text or "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç"
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, selective=True)
    kb.add(types.KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True))
    bot.send_message(chat_id, text, reply_markup=kb, parse_mode="HTML")


def _ask_confirm(bot: TeleBot, chat_id: int, user_id: int):
    with bot.retrieve_data(user_id, chat_id) as data:
        role = UserRole(int(data["role"]))
        phone = data.get("phone", "‚Äî")
        emp = data.get("employee_id", "‚Äî")
        name = (data.get("first_name") or "") + " " + (data.get("last_name") or "")

    text = (
        "<b>–ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"–†–æ–ª—å: <b>{role.label}</b>\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: <code>{phone}</code>\n"
        f"ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: <code>{emp}</code>\n"
        f"–ò–º—è (–∏–∑ Telegram): <i>{name.strip() or '‚Äî'}</i>\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?"
    )
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="reg:confirm"),
        types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="reg:edit"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="reg:cancel"),
    )
    # —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–æ–Ω—Ç–∞–∫—Ç–∞
    hide = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=hide)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)



# ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ UI ======
def _ask_role(bot: TeleBot, chat_id: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏. –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å ‚Äî –∫–Ω–æ–ø–∫—É ¬´–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å¬ª –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º.
    """
    kb = _roles_keyboard_hide_manager() if _active_manager_exists() else _roles_keyboard_full()
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=kb)


def _roles_keyboard_full() -> types.InlineKeyboardMarkup:
    """–ü–æ–ª–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ (–≤—Å–µ —Ä–æ–ª–∏)."""
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üß≠ –î–∏—Å–ø–µ—Ç—á–µ—Ä", callback_data="role:dispatcher"),
        types.InlineKeyboardButton("üöö –í–æ–¥–∏—Ç–µ–ª—å", callback_data="role:driver"),
        types.InlineKeyboardButton("üìä –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", callback_data="role:manager"),
    )
    return kb


def _roles_keyboard_hide_manager() -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ ¬´–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å¬ª (–µ—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)."""
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üß≠ –î–∏—Å–ø–µ—Ç—á–µ—Ä", callback_data="role:dispatcher"),
        types.InlineKeyboardButton("üöö –í–æ–¥–∏—Ç–µ–ª—å", callback_data="role:driver"),
    )
    return kb


# ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö ======
def _get_user_by_tg(tg_id: int) -> User | None:
    try:
        return User.get_or_none(User.tg_id == tg_id)
    except Exception:
        logger.exception("User lookup failed")
        return None


def _looks_like_phone(raw: str) -> bool:
    raw = raw.strip().replace(" ", "")
    return raw.startswith("+") or raw.isdigit()


def _normalize_phone(raw: str) -> str | None:
    try:
        candidate = phonenumbers.parse(raw, None)  # None => —Å—Ç—Ä–æ–≥–∏–π –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π
        if phonenumbers.is_valid_number(candidate):
            return phonenumbers.format_number(candidate, phonenumbers.PhoneNumberFormat.E164)
        return None
    except Exception:
        return None


def _process_contact_phone(raw: str) -> str | None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞ Telegram (—É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)"""
    if not raw:
        return None

    # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    clean = re.sub(r"[^\d+]", "", raw.strip())

    # –ù–æ–º–µ—Ä –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ–±—ã—á–Ω–æ —É–∂–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +
    if clean.startswith("+") and len(clean) >= 8:
        return clean

    # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ—Ç +, –ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å (–¥–ª—è –†–æ—Å—Å–∏–∏/–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞)
    if clean.startswith("7") and len(clean) == 11:
        return "+" + clean
    elif clean.startswith("8") and len(clean) == 11:
        return "+7" + clean[1:]

    # –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –Ω–æ–º–µ—Ä
    if len(clean) < 8:
        return None

    return clean

