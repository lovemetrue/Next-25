# handlers/driver.py
from telebot import TeleBot, types
from datetime import datetime, timedelta
from database.models import User, Order, OrderStatus, UserRole, OrderStatusHistory
from keyboards.request_actions import get_request_actions_keyboard
from keyboards.main_menu import get_main_menu
from peewee import fn


def register_driver_handlers(bot: TeleBot):
    def _ensure_driver(call_or_msg):
        """–í–µ—Ä–Ω—É—Ç—å User, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å; –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ/answer –∏ –≤–µ—Ä–Ω—É—Ç—å None."""
        tg_id = call_or_msg.from_user.id if hasattr(call_or_msg, "from_user") else None
        if tg_id is None:
            return None
        user = User.get_or_none(User.tg_id == tg_id)
        if not user or user.role != int(UserRole.DRIVER):
            # –ï—Å–ª–∏ —ç—Ç–æ callback_query ‚Äî —É –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å answer_callback_query
            if hasattr(call_or_msg, "id"):  # callback
                bot.answer_callback_query(call_or_msg.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—é.")
            else:
                bot.send_message(call_or_msg.chat.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—é.")
            return None
        return user

    def _fmt_order_brief(order: Order) -> str:
        dt = getattr(order, "datetime", None) or getattr(order, "datetime", None)
        dt_text = dt.strftime("%d.%m.%Y %H:%M") if dt else "‚Äî"
        status_text = OrderStatus(order.status).label if order.status is not None else "‚Äî"
        driver_name = f"{order.driver.first_name or ''} {(order.driver.last_name or '')}".strip() if order.driver else "‚Äî"
        return f"üìã –ó–∞—è–≤–∫–∞ #{order.id}\n{order.from_addr} ‚Üí {order.to_addr}\nüïí {dt_text}\nüöö –í–æ–¥–∏—Ç–µ–ª—å: {driver_name}\nüö¶ {status_text}"

    # --- –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ ---
    @bot.message_handler(func=lambda m: m.text == "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏")
    def driver_active_orders(message: types.Message):
        user = User.get_or_none(User.tg_id == message.from_user.id)
        if not user or user.role != int(UserRole.DRIVER):
            bot.send_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—é.")
            return

        orders = (Order
                  .select()
                  .where((Order.driver == user) &
                         (Order.status.not_in([int(OrderStatus.DELIVERED), int(OrderStatus.CANCELLED)])))
                  .order_by(Order.datetime.desc()))
        if not orders:
            bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
            return

        for o in orders:
            markup = get_request_actions_keyboard(o, "driver")
            bot.send_message(message.chat.id, _fmt_order_brief(o), reply_markup=markup)

    # --- –í –ø—É—Ç–∏ (—Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É) ---
    @bot.message_handler(func=lambda m: m.text == "üöõ –í –ø—É—Ç–∏")
    def driver_enroute_orders(message: types.Message):
        user = User.get_or_none(User.tg_id == message.from_user.id)
        if not user or user.role != int(UserRole.DRIVER):
            bot.send_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—é.")
            return

        orders = (Order
                  .select()
                  .where((Order.driver == user) &
                         (Order.status.in_([int(OrderStatus.ENROUTE), int(OrderStatus.ENROUTE_TO_LOADING)])))
                  .order_by(Order.datetime.desc()))
        if not orders:
            bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –≤ –º–∞—Ä—à—Ä—É—Ç–µ.")
            return

        for o in orders:
            markup = get_request_actions_keyboard(o, "driver")
            bot.send_message(message.chat.id, _fmt_order_brief(o), reply_markup=markup)

    # --- –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ ---
    @bot.message_handler(func=lambda m: m.text == "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ")
    def driver_done_orders(message: types.Message):
        user = User.get_or_none(User.tg_id == message.from_user.id)
        if not user or user.role != int(UserRole.DRIVER):
            bot.send_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—é.")
            return

        orders = (Order
                  .select()
                  .where((Order.driver == user) & (Order.status == int(OrderStatus.DELIVERED)))
                  .order_by(Order.datetime.desc()))
        if not orders:
            bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
            return

        for o in orders:
            markup = get_request_actions_keyboard(o, "driver")
            bot.send_message(message.chat.id, _fmt_order_brief(o), reply_markup=markup)

    # --- –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
    @bot.message_handler(func=lambda m: m.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    def driver_stats(message: types.Message):
        user = User.get_or_none(User.tg_id == message.from_user.id)
        if not user or user.role != int(UserRole.DRIVER):
            bot.send_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—é.")
            return

        total = Order.select().where(Order.driver == user).count()
        by_status_q = (Order
                       .select(Order.status, fn.COUNT(Order.id).alias("cnt"))
                       .where(Order.driver == user)
                       .group_by(Order.status))
        status_counts = {OrderStatus(r.status).label: r.cnt for r in by_status_q}

        delivered_week = (Order.select()
                          .where((Order.driver == user) &
                                 (Order.status == int(OrderStatus.DELIVERED)) &
                                 (Order.datetime >= datetime.now() - timedelta(days=7)))
                          .count())

        lines = [
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}",
            ""
        ]
        if status_counts:
            for k, v in status_counts.items():
                lines.append(f"‚Ä¢ {k}: {v}")
        else:
            lines.append("‚Ä¢ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        lines += [
            "",
            f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞ 7 –¥–Ω–µ–π: {delivered_week}"
        ]
        bot.send_message(message.chat.id, "\n".join(lines))

    # --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –≤–æ–¥–∏—Ç–µ–ª—è ---
    @bot.callback_query_handler(func=lambda c: c.data.split(":", 1)[0] in {
        "accept_request", "reject_request", "start_driving", "loading", "delivered"
    })
    def cb_driver_actions(call: types.CallbackQuery):
        bot.answer_callback_query(call.id)
        try:
            action, rest = call.data.split(":", 1)
            order_id = int(rest)
        except Exception:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback.")
            return

        user = _ensure_driver(call)
        if not user:
            return

        order = Order.get_or_none(Order.id == order_id)
        if not order:
            bot.send_message(call.message.chat.id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É –≤–æ–¥–∏—Ç–µ–ª—é
        if action in ("start_driving", "loading", "delivered", "reject_request"):
            if not order.driver or order.driver.id != user.id:
                bot.send_message(call.message.chat.id, "‚ùå –í—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ —ç—Ç—É –∑–∞—è–≤–∫—É.")
                return

        try:
            if action == "accept_request":
                # –í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞—è–≤–∫—É ‚Äî –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ –±–µ–∑ –≤–æ–¥–∏—Ç–µ–ª—è, –Ω–∞–∑–Ω–∞—á–∞–µ–º; –µ—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥—Ä—É–≥–æ–º—É ‚Äî –æ—Ç–∫–∞–∑
                if order.driver and order.driver.id != user.id:
                    bot.send_message(call.message.chat.id, "‚ùå –≠—Ç–∞ –∑–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥—Ä—É–≥–æ–º—É –≤–æ–¥–∏—Ç–µ–ª—é.")
                    return
                order.driver = user
                order.status = int(OrderStatus.CONFIRMED)
                order.save()
                OrderStatusHistory.create(order=order, by_user=user, status=order.status, note="–í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É")
                bot.send_message(call.message.chat.id, f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É #{order.id}.")
                # —É–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
                if order.dispatcher and order.dispatcher.tg_id:
                    bot.send_message(order.dispatcher.tg_id, f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {user.first_name} –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É #{order.id}.")

            elif action == "reject_request":
                # –≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è ‚Äî —Å–Ω–∏–º–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ NEW
                if order.driver and order.driver.id == user.id:
                    order.driver = None
                    order.status = int(OrderStatus.NEW)
                    order.save()
                    OrderStatusHistory.create(order=order, by_user=user, status=order.status, note="–í–æ–¥–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É")
                    bot.send_message(call.message.chat.id, f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É #{order.id}.")
                    if order.dispatcher and order.dispatcher.tg_id:
                        bot.send_message(order.dispatcher.tg_id, f"‚ùå –í–æ–¥–∏—Ç–µ–ª—å {user.first_name} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É #{order.id}.")
                else:
                    bot.send_message(call.message.chat.id, "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å: –≤—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ –∑–∞—è–≤–∫—É.")

            elif action == "start_driving":
                order.status = int(OrderStatus.ENROUTE)
                order.save()
                OrderStatusHistory.create(order=order, by_user=user, status=order.status, note="–í –ø—É—Ç–∏")
                bot.send_message(call.message.chat.id, f"üöõ –í—ã –ø–æ–º–µ—Ç–∏–ª–∏ –∑–∞—è–≤–∫—É #{order.id} –∫–∞–∫ '–≤ –ø—É—Ç–∏'.")
                if order.dispatcher and order.dispatcher.tg_id:
                    bot.send_message(order.dispatcher.tg_id, f"üöõ –ó–∞—è–≤–∫–∞ #{order.id} ‚Äî –≤–æ–¥–∏—Ç–µ–ª—å {user.first_name} –≤ –ø—É—Ç–∏.")

            elif action == "loading":
                order.status = int(OrderStatus.LOADING)
                order.save()
                OrderStatusHistory.create(order=order, by_user=user, status=order.status, note="–ù–∞ –∑–∞–≥—Ä—É–∑–∫–µ")
                bot.send_message(call.message.chat.id, f"üì¶ –í—ã –ø–æ–º–µ—Ç–∏–ª–∏ –∑–∞—è–≤–∫—É #{order.id} –∫–∞–∫ '–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–µ'.")
                if order.dispatcher and order.dispatcher.tg_id:
                    bot.send_message(order.dispatcher.tg_id, f"üì¶ –ó–∞—è–≤–∫–∞ #{order.id} ‚Äî –≤–æ–¥–∏—Ç–µ–ª—å {user.first_name} —Å–æ–æ–±—â–∞–µ—Ç: –Ω–∞ –∑–∞–≥—Ä—É–∑–∫–µ.")

            elif action == "delivered":
                order.status = int(OrderStatus.DELIVERED)
                order.save()
                OrderStatusHistory.create(order=order, by_user=user, status=order.status, note="–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
                bot.send_message(call.message.chat.id, f"‚úÖ –í—ã –ø–æ–º–µ—Ç–∏–ª–∏ –∑–∞—è–≤–∫—É #{order.id} –∫–∞–∫ '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'.")
                if order.dispatcher and order.dispatcher.tg_id:
                    bot.send_message(order.dispatcher.tg_id, f"‚úÖ –ó–∞—è–≤–∫–∞ #{order.id} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–º {user.first_name}.")

            else:
                bot.send_message(call.message.chat.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
                return

        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –≤–æ–¥–∏—Ç–µ–ª—è:")
            bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

    # --- –ï—Å–ª–∏ –Ω—É–∂–Ω–æ: –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è (–ø–æ ID) ---
    @bot.message_handler(func=lambda m: m.text and m.text.startswith("/order "))
    def cmd_order_detail(message: types.Message):
        try:
            _id = int(message.text.split(maxsplit=1)[1])
        except Exception:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /order <id>")
            return

        user = User.get_or_none(User.tg_id == message.from_user.id)
        if not user or user.role != int(UserRole.DRIVER):
            bot.send_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—é.")
            return

        order = Order.get_or_none(Order.id == _id)
        if not order:
            bot.send_message(message.chat.id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        if not order.driver or order.driver.id != user.id:
            bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ —ç—Ç—É –∑–∞—è–≤–∫—É.")
            return

        markup = get_request_actions_keyboard(order, "driver")
        bot.send_message(message.chat.id, _fmt_order_brief(order), reply_markup=markup)

    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞

    @bot.message_handler(func=lambda m: m.text == "üöõ –ó–∞—è–≤–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É")
    def show_status_lists_menu(message: types.Message):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É 4 –∫–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É.
        (–î–æ–±–∞–≤—å—Ç–µ –ø—É–Ω–∫—Ç 'üìÇ –ó–∞—è–≤–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É' –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.)
        """
        if not _ensure_driver_msg(bot, message):
            return
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫:", reply_markup=get_status_filter_keyboard_driver())

    @bot.callback_query_handler(func=lambda c: c.data.startswith("list_status_driver:"))
    def cb_list_by_status(call: types.CallbackQuery):
        """
        –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—É.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ (_send_order_card).
        """
        if not _ensure_driver_call(bot, call):
            return

        try:
            status_code = call.data.split(":", 1)[1]
        except Exception:
            bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞.")
            return

        status_map = {
            "NEW": int(OrderStatus.NEW),
            "CONFIRMED": int(OrderStatus.CONFIRMED),
            "DELIVERED": int(OrderStatus.DELIVERED),
            "CANCELLED": int(OrderStatus.CANCELLED),
        }
        status_val = status_map.get(status_code)
        if status_val is None:
            bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å.")
            return

        user = User.get_or_none(User.tg_id == call.from_user.id)
        if not user:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        orders = (Order
                  .select()
                  .where((Order.driver == user) & (Order.status == status_val))
                  .order_by(Order.datetime.desc()))

        if not orders:
            empty_text = {
                "NEW": "üÜï –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.",
                "CONFIRMED": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.",
                "DELIVERED": "üì¶ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.",
                "CANCELLED": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.",
            }[status_code]
            bot.send_message(call.message.chat.id, empty_text)
            bot.answer_callback_query(call.id)
            return

        # –ü–µ—á–∞—Ç–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        for order in orders:
            # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è _send_order_card(bot, chat_id, order, role="driver")
            _send_order_card(bot, call.message.chat.id, order, role="driver")

        bot.answer_callback_query(call.id)