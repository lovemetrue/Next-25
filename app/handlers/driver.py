# handlers/driver.py
from telebot import TeleBot, types
from datetime import datetime, timedelta
from database.models import User, Order, OrderStatus, UserRole, OrderStatusHistory
from keyboards.request_actions import get_request_actions_keyboard
from keyboards.main_menu import get_main_menu
from peewee import fn
from states.request_states import DriverStates
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def register_driver_handlers(bot: TeleBot):

     # ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û =====================

    def _ensure_driver_call(bot, call: types.CallbackQuery) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∫–æ–ª–ª–±—ç–∫–∞ ‚Äî –¥–∏—Å–ø–µ—Ç—á–µ—Ä.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True/False, –ø—Ä–∏ False –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ callback_query.
        """
        user = User.get_or_none(User.tg_id == call.from_user.id)
        if not user or user.role != int(UserRole.DRIVER):
            bot.answer_callback_query(call.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—é.")
            return False
        return True

    def _ensure_driver_msg(bot, message: types.Message) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –¥–∏—Å–ø–µ—Ç—á–µ—Ä.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True/False, –ø—Ä–∏ False –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —á–∞—Ç.
        """
        user = User.get_or_none(User.tg_id == message.from_user.id)
        if not user or user.role != int(UserRole.DRIVER):
            bot.send_message(message.chat.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—é.")
            return False
        return True

    def _ensure_driver(call_or_msg):
        """–í–µ—Ä–Ω—É—Ç—å User, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å; –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ/answer –∏ –≤–µ—Ä–Ω—É—Ç—å None."""
        tg_id = call_or_msg.from_user.id if hasattr(call_or_msg, "from_user") else None
        if tg_id is None:
            return None
        user = User.get_or_none(User.tg_id == tg_id)
        if not user or user.role != int(UserRole.DRIVER):
            # –ï—Å–ª–∏ —ç—Ç–æ callback_query ‚Äî —É –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å answer_callback_query
            if hasattr(call_or_msg, "id"):  # callback
                bot.answer_callback_query(call_or_msg.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—é.")
            else:
                bot.send_message(call_or_msg.chat.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—é.")
            return None
        return user

    def _fmt_order_brief(order: Order) -> str:
        dt = getattr(order, "datetime", None) or getattr(order, "exec_datetime", None)
        dt_text = dt.strftime("%d.%m.%Y %H:%M") if dt else "‚Äî"
        status_text = OrderStatus(order.status).label if order.status is not None else "‚Äî"
        driver_name = f"{order.driver.first_name or ''} {(order.driver.last_name or '')}".strip() if order.driver else "‚Äî"
        return f"üìã –ó–∞—è–≤–∫–∞ #{order.id}\n{order.from_addr} ‚Üí {order.to_addr}\nüïí {dt_text}\nüöö –í–æ–¥–∏—Ç–µ–ª—å: {driver_name}\nüö¶ {status_text}"

    # --- –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ ---
    @bot.message_handler(func=lambda m: m.text == "üìÜ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏")
    def driver_active_orders(message: types.Message):
        user = User.get_or_none(User.tg_id == message.from_user.id)
        if not user or user.role != int(UserRole.DRIVER):
            bot.send_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—é.")
            return

        orders = (Order
                  .select()
                  .where((Order.driver == user) &
                         (Order.status.not_in([int(OrderStatus.DELIVERED), int(OrderStatus.CANCELLED)])))
                  .order_by(Order.datetime.desc()))
        if not orders:
            bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
            return

        for o in orders:
            markup = get_request_actions_keyboard(o, "driver")
            bot.send_message(message.chat.id, _fmt_order_brief(o), reply_markup=markup)


    #### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    @bot.message_handler(func=lambda m: m.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    def driver_stats(message: types.Message):
        user = User.get_or_none(User.tg_id == message.from_user.id)
        if not user or user.role != int(UserRole.DRIVER):
            bot.send_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—é.")
            return

        total = Order.select().where(Order.driver == user).count()
        by_status_q = (Order
                       .select(Order.status, fn.COUNT(Order.id).alias("cnt"))
                       .where(Order.driver == user)
                       .group_by(Order.status))
        status_counts = {OrderStatus(r.status).label: r.cnt for r in by_status_q}

        delivered_week = (Order.select()
                          .where((Order.driver == user) &
                                 (Order.status == int(OrderStatus.DELIVERED)) &
                                 (Order.datetime >= datetime.now() - timedelta(days=7)))
                          .count())

        lines = [
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}",
            ""
        ]
        if status_counts:
            for k, v in status_counts.items():
                lines.append(f"‚Ä¢ {k}: {v}")
        else:
            lines.append("‚Ä¢ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        lines += [
            "",
            f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞ 7 –¥–Ω–µ–π: {delivered_week}"
        ]
        bot.send_message(message.chat.id, "\n".join(lines))



    # ===================== –ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ó–ê–Ø–í–ö–ò =====================
    @bot.message_handler(func=lambda m: m.text == "üöõ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏")
    def driver_completed_orders(message: types.Message):
        user = _ensure_driver(message)
        if not user:
            return

        # –ó–∞—è–≤–∫–∏ —Å —Å—Ç–∞—Ç—É—Å–æ–º DELIVERED –∏–ª–∏ CANCELLED
        orders = (Order
                  .select()
                  .where((Order.driver == user) &
                         (Order.status.in_([int(OrderStatus.DELIVERED), int(OrderStatus.CANCELLED)])))
                  .order_by(Order.datetime.desc())
                  .limit(20))  # –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏

        if not orders:
            bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
            return

        for order in orders:
            # –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º actions keyboard
            bot.send_message(message.chat.id, _fmt_order_brief(order))

        ##### EDITION OF ORDERS
        # === –ë–ª–æ–∫: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–µ—Å–ª–∏ DriverStates –ª–µ–∂–∏—Ç –≤ –¥—Ä—É–≥–æ–º –º–æ–¥—É–ª–µ) ===
        try:
            from states.request_states import DriverStates
        except Exception:
            try:
                from states.driver_states import DriverStates
            except Exception:
                # –ï—Å–ª–∏ –∏ —Ç—É—Ç –Ω–µ—Ç ‚Äî —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å StateGroup —Å –∏–º–µ–Ω–µ–º DriverStates,
                # —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ waiting_comment –∏ waiting_photo.
                DriverStates = None

    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

    def _ensure_driver_call(call: types.CallbackQuery):
        """
        –í–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç User, –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä callback_query ‚Äî –≤–æ–¥–∏—Ç–µ–ª—å.
        –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç answer_callback_query –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
        """
        from_user = getattr(call, "from_user", None)
        if not from_user:
            try:
                bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
            except Exception:
                pass
            return None
        user = User.get_or_none(User.tg_id == from_user.id)
        if not user or int(user.role) != int(UserRole.DRIVER):
            try:
                bot.answer_callback_query(call.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—é.")
            except Exception:
                pass
            return None
        return user

    def _ensure_driver_msg(message: types.Message):
        """
        –í–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç User, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å message ‚Äî –≤–æ–¥–∏—Ç–µ–ª—å.
        –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
        """
        from_user = getattr(message, "from_user", None)
        if not from_user:
            return None
        user = User.get_or_none(User.tg_id == from_user.id)
        if not user or int(user.role) != int(UserRole.DRIVER):
            try:
                bot.send_message(message.chat.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—é.")
            except Exception:
                pass
            return None
        return user

    def _get_order_or_notify_chat(chat_id: int, order_id: int):
        """
        –ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ id –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç (chat_id), –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
        """
        order = Order.get_or_none(Order.id == order_id)
        if not order:
            try:
                bot.send_message(chat_id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            except Exception:
                pass
        return order

    def _get_order_or_notify_callback(call: types.CallbackQuery, order_id: int):
        """
        –ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ id –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ callback (call) —á—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
        """
        order = Order.get_or_none(Order.id == order_id)
        if not order:
            try:
                bot.answer_callback_query(call.id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            except Exception:
                pass
        return order

    # –ú—ç–ø–ø–∏–Ω–≥ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
    _STATUS_LABELS = {
        int(OrderStatus.ENROUTE_TO_LOADING): "üöö –í –ø—É—Ç—å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É",
        int(OrderStatus.LOADING): "üì¶ –ù–∞ –∑–∞–≥—Ä—É–∑–∫–µ",
        int(OrderStatus.ENROUTE): "üöö –í –ø—É—Ç—å",
        int(OrderStatus.DELIVERED): "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ",
        int(OrderStatus.CONFIRMED): "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
        int(OrderStatus.NEW): "üÜï –ù–æ–≤–∞—è",
        int(OrderStatus.CANCELLED): "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞",
    }

    def _allowed_transitions_for(status_value: int) -> list[int]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ü–µ–ª–µ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ (–¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è).
        –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: NEW -> CONFIRMED -> ENROUTE_TO_LOADING -> LOADING -> ENROUTE -> DELIVERED
        (–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —É–ø—Ä–æ—â—ë–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã.)
        """
        NEW = int(OrderStatus.NEW)
        CONFIRMED = int(OrderStatus.CONFIRMED)
        ENROUTE_TO_LOADING = int(OrderStatus.ENROUTE_TO_LOADING)
        LOADING = int(OrderStatus.LOADING)
        ENROUTE = int(OrderStatus.ENROUTE)
        DELIVERED = int(OrderStatus.DELIVERED)
        CANCELLED = int(OrderStatus.CANCELLED)

        mapping = {
            NEW: [CONFIRMED],
            CONFIRMED: [ENROUTE_TO_LOADING, ENROUTE],
            # –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å—Ä–∞–∑—É –≤ ENROUTE –∏–ª–∏ —Å–Ω–∞—á–∞–ª–∞ –≤ ENROUTE_TO_LOADING
            ENROUTE_TO_LOADING: [LOADING],
            LOADING: [ENROUTE],
            ENROUTE: [DELIVERED],
        }
        return mapping.get(int(status_value), [])

    # === –•–ï–ù–î–õ–ï–†: –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è ===
    @bot.callback_query_handler(func=lambda c: c.data.startswith("driver_change_status:"))
    def cb_driver_change_status(call: types.CallbackQuery):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—é inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏.
        callback_data –æ–∂–∏–¥–∞–µ—Ç—Å—è: "driver_change_status:{order_id}"
        """
        user = _ensure_driver_call(call)
        if not user:
            return

        # –ø–æ–ª—É—á–∏—Ç—å order_id
        try:
            order_id = int(call.data.split(":", 1)[1])
        except Exception:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞—è–≤–∫–∏.")
            return

        order = _get_order_or_notify_callback(call, order_id)
        if not order:
            return

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –≤–æ–¥–∏—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞—è–≤–∫—É
        if not order.driver or int(order.driver.id) != int(user.id):
            bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
        targets = _allowed_transitions_for(int(order.status))
        if not targets:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏.")
            return

        markup = types.InlineKeyboardMarkup(row_width=1)
        for ts in targets:
            label = _STATUS_LABELS.get(ts, f"–°—Ç–∞—Ç—É—Å {ts}")
            # callback: driver_set_status:{order_id}:{new_status}
            markup.add(types.InlineKeyboardButton(label, callback_data=f"driver_set_status:{order.id}:{ts}"))

        # –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª–µ–∑–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞ / –í–µ—Ä–Ω—É—Ç—å—Å—è
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"driver_cancel_action:{order.id}"))

        try:
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", reply_markup=markup)
        except Exception:
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.")
            return

        bot.answer_callback_query(call.id)

    # === –•–ï–ù–î–õ–ï–†: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å ===
    @bot.callback_query_handler(func=lambda c: c.data.startswith("driver_set_status:"))
    def cb_driver_set_status(call: types.CallbackQuery):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–º.
        callback_data: "driver_set_status:{order_id}:{new_status_int}"
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –≤–æ–¥–∏—Ç–µ–ª—é –∏ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞.
        """
        user = _ensure_driver_call(call)
        if not user:
            return

        parts = call.data.split(":")
        if len(parts) < 3:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
            return

        try:
            order_id = int(parts[1])
            new_status = int(parts[2])
        except Exception:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
            return

        order = _get_order_or_notify_callback(call, order_id)
        if not order:
            return

        if not order.driver or int(order.driver.id) != int(user.id):
            bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return

        valid_targets = _allowed_transitions_for(int(order.status))
        if new_status not in valid_targets:
            bot.answer_callback_query(call.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.")
            return

        # –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        prev_status = int(order.status)
        order.status = new_status
        order.save()

        status_name = _STATUS_LABELS.get(new_status, str(new_status))
        OrderStatusHistory.create(
            order=order,
            by_user=user,
            status=new_status,
            note=f"–í–æ–¥–∏—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –Ω–∞: {status_name}"
        )

        # —É–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å tg_id)
        try:
            if order.dispatcher and getattr(order.dispatcher, "tg_id", None):
                bot.send_message(order.dispatcher.tg_id,
                                 f"üö¶ –í –∑–∞—è–≤–∫–µ #{order.id} –≤–æ–¥–∏—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –Ω–∞: {status_name}")
        except Exception:
            pass

        # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é
        bot.answer_callback_query(call.id, f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {status_name}")

        # –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        try:
            bot.edit_message_text(
                _fmt_order_brief(order),
                call.message.chat.id,
                call.message.message_id,
                reply_markup=get_request_actions_keyboard(order, "driver")
            )
        except Exception:
            # fallback: –≤—ã—Å—ã–ª–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            try:
                bot.send_message(call.message.chat.id, _fmt_order_brief(order),
                                 reply_markup=get_request_actions_keyboard(order, "driver"))
            except Exception:
                pass

    # === –•–ï–ù–î–õ–ï–†: –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–µ) ===
    @bot.callback_query_handler(func=lambda c: c.data.startswith("driver_add_comment:"))
    def cb_driver_add_comment(call: types.CallbackQuery):
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤–æ–¥–∏—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
        callback_data: "driver_add_comment:{order_id}"
        """
        user = _ensure_driver_call(call)
        if not user:
            return

        try:
            order_id = int(call.data.split(":", 1)[1])
        except Exception:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞—è–≤–∫–∏.")
            return

        order = _get_order_or_notify_callback(call, order_id)
        if not order:
            return

        if not order.driver or int(order.driver.id) != int(user.id):
            bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return

        if DriverStates is None:
            bot.answer_callback_query(call.id, "–°–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (DriverStates –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç).")
            return

        # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        bot.set_state(call.from_user.id, DriverStates.waiting_comment, call.message.chat.id)
        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data["order_id"] = order.id

        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ /stop –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
        bot.answer_callback_query(call.id)

    @bot.message_handler(state=(DriverStates.waiting_comment if DriverStates else None), content_types=["text"])
    def driver_comment_step(message: types.Message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤–æ–¥–∏—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.
        """
        if DriverStates is None:
            bot.send_message(message.chat.id, "–°–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
            return

        user = _ensure_driver_msg(message)
        if not user:
            bot.delete_state(message.from_user.id, message.chat.id)
            return

        # –æ—Ç–º–µ–Ω–∞
        if (message.text or "").strip().lower() in ("/stop", "–æ—Ç–º–µ–Ω–∞", "–≤—ã–π—Ç–∏"):
            bot.delete_state(message.from_user.id, message.chat.id)
            bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            order_id = data.get("order_id")

        order = _get_order_or_notify_chat(message.chat.id, order_id) if order_id else None
        if not order or not order.driver or int(order.driver.id) != int(user.id):
            bot.send_message(message.chat.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            bot.delete_state(message.from_user.id, message.chat.id)
            return

        text = (message.text or "").strip()
        OrderStatusHistory.create(order=order, by_user=user, status=order.status,
                                  note=f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤–æ–¥–∏—Ç–µ–ª—è: {text}")

        try:
            if order.dispatcher and getattr(order.dispatcher, "tg_id", None):
                bot.send_message(order.dispatcher.tg_id,
                                 f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –∑–∞—è–≤–∫–µ #{order.id}:\n\n{text}")
        except Exception:
            pass

        bot.send_message(message.chat.id, "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω.")
        bot.delete_state(message.from_user.id, message.chat.id)

    # === –•–ï–ù–î–õ–ï–†: –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ (—á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–µ) ===
    @bot.callback_query_handler(func=lambda c: c.data.startswith("driver_add_photo:"))
    def cb_driver_add_photo(call: types.CallbackQuery):
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤–æ–¥–∏—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–∞.
        callback_data: "driver_add_photo:{order_id}"
        """
        user = _ensure_driver_call(call)
        if not user:
            return

        try:
            order_id = int(call.data.split(":", 1)[1])
        except Exception:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞—è–≤–∫–∏.")
            return

        order = _get_order_or_notify_callback(call, order_id)
        if not order:
            return

        if not order.driver or int(order.driver.id) != int(user.id):
            bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return

        if DriverStates is None:
            bot.answer_callback_query(call.id, "–°–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (DriverStates –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç).")
            return

        bot.set_state(call.from_user.id, DriverStates.waiting_photo, call.message.chat.id)
        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data["order_id"] = order.id

        bot.send_message(call.message.chat.id, "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∫ –∑–∞—è–≤–∫–µ (–∏–ª–∏ /stop –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
        bot.answer_callback_query(call.id)

    @bot.message_handler(state=(DriverStates.waiting_photo if DriverStates else None),
                         content_types=["photo", "document", "text"])
    def driver_photo_step(message: types.Message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç file_id –≤ Attachment (–µ—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥–µ–ª—å),
        –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Ñ–∞–π–ª –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á—ë–Ω).
        """
        if DriverStates is None:
            bot.send_message(message.chat.id, "–°–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
            return

        user = _ensure_driver_msg(message)
        if not user:
            bot.delete_state(message.from_user.id, message.chat.id)
            return

        # –æ—Ç–º–µ–Ω–∞
        if (message.content_type == "text") and (
                (message.text or "").strip().lower() in ("/stop", "–æ—Ç–º–µ–Ω–∞", "–≤—ã–π—Ç–∏")):
            bot.delete_state(message.from_user.id, message.chat.id)
            bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            order_id = data.get("order_id")

        order = _get_order_or_notify_chat(message.chat.id, order_id) if order_id else None
        if not order or not order.driver or int(order.driver.id) != int(user.id):
            bot.send_message(message.chat.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            bot.delete_state(message.from_user.id, message.chat.id)
            return

        # –∏–∑–≤–ª–µ–∫–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ
        file_id = None
        file_type = None
        caption = None
        if message.photo:
            file_id = message.photo[-1].file_id
            file_type = "image"
            caption = getattr(message, "caption", None)
        elif message.document:
            file_id = message.document.file_id
            mt = (message.document.mime_type or "").lower()
            file_type = "image" if mt.startswith("image/") else "document"
            caption = getattr(message, "caption", None)
        else:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Attachment, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –µ—Å—Ç—å (–ø–æ–ø—ã—Ç–∫–∞)
        try:
            Attachment.create(order=order, uploaded_by=user, file_id=file_id, file_type=file_type, caption=caption)
        except Exception:
            # –µ—Å–ª–∏ –Ω–µ—Ç –º–æ–¥–µ–ª–∏ Attachment ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            logger = logging.getLogger(__name__)
            logger.debug("Attachment –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –º–æ–¥–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞) –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

        # –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        OrderStatusHistory.create(order=order, by_user=user, status=order.status,
                                  note=f"–í–æ–¥–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª —Ñ–∞–π–ª: {caption or '[—Ñ–∞–π–ª]'}")

        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
        try:
            if order.dispatcher and getattr(order.dispatcher, "tg_id", None):
                if file_type == "image":
                    bot.send_photo(order.dispatcher.tg_id, file_id,
                                   caption=f"–§–æ—Ç–æ –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –∑–∞—è–≤–∫–µ #{order.id}\n{caption or ''}")
                else:
                    bot.send_document(order.dispatcher.tg_id, file_id,
                                      caption=f"–§–∞–π–ª –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –∑–∞—è–≤–∫–µ #{order.id}\n{caption or ''}")
        except Exception:
            pass

        bot.delete_state(message.from_user.id, message.chat.id)

    # === –•–ï–ù–î–õ–ï–†: –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É ===
    @bot.callback_query_handler(func=lambda c: c.data.startswith("driver_accept:"))
    def cb_driver_accept(call: types.CallbackQuery):
        """
        –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–º (callback_data = "driver_accept:{order_id}").
        –¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞—è–≤–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ NEW.
        –ù–∞–∑–Ω–∞—á–∞–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –∑–∞—è–≤–∫—É –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å –≤ CONFIRMED.
        """
        user = _ensure_driver_call(call)
        if not user:
            return

        try:
            order_id = int(call.data.split(":", 1)[1])
        except Exception:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞—è–≤–∫–∏.")
            return

        order = _get_order_or_notify_callback(call, order_id)
        if not order:
            return

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        if int(order.status) != int(OrderStatus.NEW):
            bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫—É –Ω–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å ‚Äî –æ–Ω–∞ —É–∂–µ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ NEW.")
            return

        # –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ –¥—Ä—É–≥–æ–π –≤–æ–¥–∏—Ç–µ–ª—å
        if order.driver and int(order.driver.id) != int(user.id):
            bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥—Ä—É–≥–æ–º—É –≤–æ–¥–∏—Ç–µ–ª—é.")
            return

        order.driver = user
        order.status = int(OrderStatus.CONFIRMED)
        order.save()

        OrderStatusHistory.create(order=order, by_user=user, status=order.status, note="–í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É")

        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
        try:
            if order.dispatcher and getattr(order.dispatcher, "tg_id", None):
                bot.send_message(order.dispatcher.tg_id,
                                 f"üöö –í–æ–¥–∏—Ç–µ–ª—å {user.first_name or ''} –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É #{order.id}")
        except Exception:
            pass

        bot.answer_callback_query(call.id, "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        try:
            bot.edit_message_text(
                _fmt_order_brief(order),
                call.message.chat.id,
                call.message.message_id,
                reply_markup=get_request_actions_keyboard(order, "driver")
            )
        except Exception:
            # fallback ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            try:
                bot.send_message(call.message.chat.id, _fmt_order_brief(order),
                                 reply_markup=get_request_actions_keyboard(order, "driver"))
            except Exception:
                pass