# handlers/manager.py
from telebot import TeleBot, types
from loguru import logger
from peewee import fn
from datetime import datetime, timedelta
from typing import Optional
from app.database.models import User, UserRole, Order, OrderStatus, OrderPrefix
from app.keyboards.main_menu import get_main_menu
from app.keyboards.request_actions import (
    get_request_actions_keyboard,
)
from app.handlers.attachments import register_attachments_reports_handlers

def register_manager_handlers(bot: TeleBot):
    """–•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"""

    # üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    @bot.message_handler(func=lambda m: m.text == "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    def show_stats(message: types.Message):
        total_orders = Order.select().count()
        delivered_orders = Order.select().where(Order.status == int(OrderStatus.DELIVERED)).count()
        cancelled_orders = Order.select().where(Order.status == int(OrderStatus.CANCELLED)).count()

        drivers = User.select().where(User.role == int(UserRole.DRIVER)).count()
        dispatchers = User.select().where(User.role == int(UserRole.DISPATCHER)).count()

        text = (
            "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_orders}\n"
            f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {delivered_orders}\n"
            f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {cancelled_orders}\n\n"
            f"üöõ –í–æ–¥–∏—Ç–µ–ª–µ–π: {drivers}\n"
            f"üß≠ –î–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤: {dispatchers}\n"
        )
        bot.send_message(message.chat.id, text, parse_mode="HTML")

    # üë• –ü–µ—Ä—Å–æ–Ω–∞–ª
    @bot.message_handler(func=lambda m: m.text == "üë• –ü–µ—Ä—Å–æ–Ω–∞–ª")
    def show_personnel(message: types.Message):
        users = User.select().where(User.is_active == True)

        text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        for u in users:
            role = UserRole(u.role).label
            text += f"ID {u.id}: {u.first_name} {u.last_name or ''} (@{u.username or '-'}) ‚Äî {role}\n"

        text += "\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n" \
                "<code>/user_edit ID</code> –∏–ª–∏ <code>/user_delete ID</code> –∏–ª–∏ <code>/user_activate ID</code>\n\n" \
                "–ü—Ä–∏–º–µ—Ä: /user_delete 1\n" \
                "–í—ã–≤–æ–¥: üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID 1 –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"

        bot.send_message(message.chat.id, text, parse_mode="HTML")

    # üöõ –í—Å–µ –∑–∞—è–≤–∫–∏
    @bot.message_handler(func=lambda m: m.text == "üöõ –í—Å–µ –∑–∞—è–≤–∫–∏")
    def show_all_requests(message: types.Message):
        orders = Order.select().order_by(Order.created_at.desc()).limit(10)

        if not orders:
            bot.send_message(message.chat.id, "‚ùå –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        text = "üöõ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n\n"
        for o in orders:
            driver = o.driver.first_name if o.driver else "‚Äî"
            text += f"#{o.id} | {OrderStatus(o.status).label} | –í–æ–¥–∏—Ç–µ–ª—å: {driver}\n"

        bot.send_message(message.chat.id, text)

    # üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    @bot.message_handler(func=lambda m: m.text == "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    def show_analytics(message: types.Message):
        week_ago = datetime.now() - timedelta(days=7)
        weekly_orders = Order.select().where(Order.created_at >= week_ago).count()
        delivered_week = Order.select().where(
            (Order.status == int(OrderStatus.DELIVERED)) &
            (Order.created_at >= week_ago)
        ).count()

        text = (
            "üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é</b>\n\n"
            f"–°–æ–∑–¥–∞–Ω–æ –∑–∞—è–≤–æ–∫: {weekly_orders}\n"
            f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {delivered_week}\n"
        )
        bot.send_message(message.chat.id, text, parse_mode="HTML")

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @bot.message_handler(commands=["user_delete"])
    def cmd_user_delete(message: types.Message):
        args = message.text.split()
        if len(args) < 2 or not args[1].isdigit():
            bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /user_delete 5")
            return

        manager_id = message.from_user.id
        user_id = int(args[1])
        result = delete_user(user_id, manager_id)
        bot.send_message(message.chat.id, result)

    @bot.message_handler(commands=["user_activate"])
    def cmd_user_activate(message: types.Message):
        args = message.text.split()
        if len(args) < 2 or not args[1].isdigit():
            bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /user_activate 5")
            return

        user_id = int(args[1])
        user = User.get_or_none(User.id == user_id)
        if not user:
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user.is_active = True
        user.save()

        bot.send_message(message.chat.id, f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @bot.message_handler(commands=["user_edit"])
    def cmd_user_edit(message: types.Message):
        args = message.text.split()
        if len(args) < 4:
            bot.send_message(message.chat.id,
                             "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_edit ID field value\n"
                             "–ü—Ä–∏–º–µ—Ä: /user_edit 5 role driver")
            return

        user_id = int(args[1])
        field = args[2]
        value = args[3]

        user = User.get_or_none(User.id == user_id)
        if not user:
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if field == "role":
            mapping = {"dispatcher": UserRole.DISPATCHER, "driver": UserRole.DRIVER, "manager": UserRole.MANAGER}
            if value not in mapping:
                bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –î–æ—Å—Ç—É–ø–Ω–æ: dispatcher, driver, manager")
                return
            user.role = int(mapping[value])
        elif field == "phone":
            user.phone = value
        elif field == "employee_id":
            user.employee_id = value
        else:
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª–µ '{field}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return

        user.save()
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user.id} –æ–±–Ω–æ–≤–ª—ë–Ω.")



    # -------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ --------------------

    def _get_user_from_update(update) -> Optional[User]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç User –ø–æ update (callback_query –∏–ª–∏ message),
        –ª–∏–±–æ None –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç (callback_answer / message) –ø—Ä–∏ –æ—à–∏–±–∫–µ.
        """
        from_user = getattr(update, "from_user", None)
        if not from_user:
            return None
        return User.get_or_none(User.tg_id == from_user.id)

    def _format_order_brief(o: Order) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é —Å—Ç—Ä–æ–∫—É –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏.
        """
        dt = getattr(o, "datetime", None)
        dt_text = dt.strftime("%d.%m.%Y %H:%M") if dt else "‚Äî"
        status_text = OrderStatus(o.status).label if o.status is not None else "‚Äî"
        driver_name = (f"{o.driver.first_name or ''} {(o.driver.last_name or '')}".strip() if o.driver else "‚Äî")
        dispatcher_name = (f"{o.dispatcher.first_name or ''}" if o.dispatcher else "‚Äî")
        return (f"üìã –ó–∞—è–≤–∫–∞ #{o.id}\n"
                f"{o.from_addr} ‚Üí {o.to_addr}\n"
                f"üïí {dt_text}\n"
                f"üöö –í–æ–¥–∏—Ç–µ–ª—å: {driver_name}\n"
                f"üë§ –î–∏—Å–ø–µ—Ç—á–µ—Ä: {dispatcher_name}\n"
                f"üö¶ {status_text}")

    def _build_history_attachments_markup(order: Order) -> types.InlineKeyboardMarkup:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç InlineKeyboardMarkup –∏–∑ –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫:
          - –ò—Å—Ç–æ—Ä–∏—è (request_history:{id})
          - –í–ª–æ–∂–µ–Ω–∏—è (show_attachments:{id})
        """
        kb = types.InlineKeyboardMarkup(row_width=2)
        kb.add(
            types.InlineKeyboardButton("üïò –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"request_history:{order.id}"),
            types.InlineKeyboardButton("üìé –í–ª–æ–∂–µ–Ω–∏—è", callback_data=f"show_attachments:{order.id}")
        )
        return kb

    # -------------------- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–µ—Ä–∏–æ–¥–æ–≤ (–∏–Ω–ª–∞–π–Ω) --------------------

    @bot.callback_query_handler(func=lambda c: c.data == "all_requests_menu")
    def cb_all_requests_menu(call: types.CallbackQuery):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞: –Ω–µ–¥–µ–ª—è / –º–µ—Å—è—Ü / –≤—Å—ë.
        callback_data –¥–ª—è –æ–ø—Ü–∏–π: mgr_requests:week / mgr_requests:month / mgr_requests:all
        """
        bot.answer_callback_query(call.id)
        kb = types.InlineKeyboardMarkup(row_width=2)
        kb.add(
            types.InlineKeyboardButton("üóì –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="mgr_requests:week"),
            types.InlineKeyboardButton("üóì –ó–∞ –º–µ—Å—è—Ü", callback_data="mgr_requests:month")
        )
        kb.add(types.InlineKeyboardButton("üìä –ó–∞ –≤—Å—ë", callback_data="mgr_requests:all"))
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫:", reply_markup=kb)

    # –¢–∞–∫–∂–µ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π/—Ä–µ–ø–ª–∞–π –∫–Ω–æ–ø–∫–∏ "üìã –í—Å–µ –∑–∞—è–≤–∫–∏" –µ—Å–ª–∏ —Ç–∞–∫–∞—è –µ—Å—Ç—å –≤ –º–µ–Ω—é:
    @bot.message_handler(func=lambda m: m.text == "üìã –í—Å–µ –∑–∞—è–≤–∫–∏")
    def msg_all_requests_menu(message: types.Message):
        """
        –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É "üìã –í—Å–µ –∑–∞—è–≤–∫–∏" ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—Ç –∂–µ inline menu.
        """
        kb = types.InlineKeyboardMarkup(row_width=2)
        kb.add(
            types.InlineKeyboardButton("üóì –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="mgr_requests:week"),
            types.InlineKeyboardButton("üóì –ó–∞ –º–µ—Å—è—Ü", callback_data="mgr_requests:month")
        )
        kb.add(types.InlineKeyboardButton("üìä –ó–∞ –≤—Å—ë", callback_data="mgr_requests:all"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫:", reply_markup=kb)

    # -------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ --------------------

    @bot.callback_query_handler(func=lambda c: c.data.startswith("mgr_requests:"))
    def cb_mgr_requests_period(call: types.CallbackQuery):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫.
        –ï—Å–ª–∏ –≤—ã–∑—ã–≤–∞—é—â–∏–π ‚Äî MANAGER: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏.
        –ï—Å–ª–∏ DISPATCHER: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏, –≥–¥–µ –æ–Ω ‚Äî dispatcher.
        """
        bot.answer_callback_query(call.id)
        user = _get_user_from_update(call)
        if not user:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
        try:
            _, period = call.data.split(":", 1)
        except Exception:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä.")
            return

        now = datetime.now()
        if period == "week":
            since = now - timedelta(days=7)
            title = "–ó–∞—è–≤–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é"
        elif period == "month":
            since = now - timedelta(days=30)
            title = "–ó–∞—è–≤–∫–∏ –∑–∞ –º–µ—Å—è—Ü"
        else:  # all
            since = None
            title = "–í—Å–µ –∑–∞—è–≤–∫–∏"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if int(user.role) == int(UserRole.MANAGER):
            q = Order.select().order_by(Order.datetime.desc())
            if since:
                q = q.where(Order.datetime >= since)
        elif int(user.role) == int(UserRole.DISPATCHER):
            q = Order.select().where(Order.dispatcher == user).order_by(Order.datetime.desc())
            if since:
                q = q.where(Order.datetime >= since)
        else:
            bot.send_message(call.message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫.")
            return

        orders = list(q)
        if not orders:
            bot.send_message(call.message.chat.id, f"üì≠ {title}: –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–∞—Ä—Ç–æ—á–∫–∏
        bot.send_message(call.message.chat.id, f"üìã {title} ‚Äî –Ω–∞–π–¥–µ–Ω–æ: {len(orders)}")
        for o in orders:
            text = _format_order_brief(o)
            kb = _build_history_attachments_markup(o)
            bot.send_message(call.message.chat.id, text, reply_markup=kb)

    # --- –∫–æ–Ω–µ—Ü register_manager_requests_handlers ---


    # üìå –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è
    @bot.callback_query_handler(func=lambda c: c.data == "reassign_driver")
    def cb_reassign_driver(call: types.CallbackQuery):
        order_id = call.message.text.split()[0].replace("#", "")  # –¥–æ–ø—É—Å—Ç–∏–º –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞—è–≤–∫–∏ –µ—Å—Ç—å #id
        order = Order.get_or_none(Order.id == int(order_id))
        if not order:
            bot.answer_callback_query(call.id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        drivers = User.select().where(User.role == int(UserRole.DRIVER))
        kb = types.InlineKeyboardMarkup()
        for d in drivers:
            kb.add(types.InlineKeyboardButton(
                f"{d.first_name} {d.last_name or ''}", callback_data=f"assign_driver:{order.id}:{d.id}"
            ))
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=kb)

    @bot.callback_query_handler(func=lambda c: c.data.startswith("assign_driver:"))
    def cb_assign_driver(call: types.CallbackQuery):
        _, order_id, driver_id = call.data.split(":")
        order = Order.get_or_none(Order.id == int(order_id))
        driver = User.get_or_none(User.id == int(driver_id))
        if not order or not driver:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞.")
            return

        order.assigned_driver = driver
        order.status = int(OrderStatus.CONFIRMED)
        order.save()

        bot.edit_message_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{order.id} –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ {driver.first_name}",
                              call.message.chat.id, call.message.message_id)

    # ‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏
    @bot.callback_query_handler(func=lambda c: c.data == "cancel_request")
    def cb_cancel_request(call: types.CallbackQuery):
        order_id = call.message.text.split()[0].replace("#", "")
        order = Order.get_or_none(Order.id == int(order_id))
        if not order:
            bot.answer_callback_query(call.id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        order.status = int(OrderStatus.CANCELLED)
        order.save()

        bot.edit_message_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{order.id} –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                              call.message.chat.id, call.message.message_id)

    # üì§ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–æ–≤
    register_attachments_reports_handlers(bot)


def delete_user(user_id: int, manager_id: int) -> str:
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID.
    - –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–∞–º —Å–µ–±—è.
    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π (is_active = False).
    """

    if user_id == manager_id:
        return "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è."

    user = User.get_or_none(User.id == user_id)
    if not user:
        return f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."

    if not user.is_active:
        return f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω."

    user.is_active = False
    user.save()

    return f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} ({user.first_name} {user.last_name or ''}) –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."