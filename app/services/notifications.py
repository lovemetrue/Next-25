import logging
from database import crud
from telebot import types

logger = logging.getLogger(__name__)


def notify_driver_about_request(bot, request_id):
    request = crud.get_request(request_id)
    driver = crud.get_user(request.driver_id)

    if not driver:
        return

    text = f"üöõ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}\n\n"
    text += f"–û—Ç: {request.point_a} ‚Üí –î–æ: {request.point_b}\n"
    text += f"–í—Ä–µ–º—è: {request.scheduled_time}\n"
    if request.comment:
        text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {request.comment}\n"

    markup = types.InlineKeyboardMarkup()
    accept_btn = types.InlineKeyboardButton(
        "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
        callback_data=f"accept_request:{request_id}"
    )
    reject_btn = types.InlineKeyboardButton(
        "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
        callback_data=f"reject_request:{request_id}"
    )
    markup.add(accept_btn, reject_btn)

    bot.send_message(driver.telegram_id, text, reply_markup=markup)



def notify_dispatcher_about_status_change(bot, request_id, message_text):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    try:
        request = crud.get_request(request_id)
        if not request or not request.dispatcher:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫—É #{request_id} –∏–ª–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞")
            return False

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        notification_text = f"üîî –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #{request_id}\n\n"
        notification_text += f"{message_text}\n\n"
        notification_text += f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {request.status}\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
        bot.send_message(
            request.dispatcher.telegram_id,
            notification_text
        )

        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É: {e}")
        return False


def notify_driver_about_assignment(bot, request_id):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞ –∑–∞—è–≤–∫—É"""
    try:
        request = crud.get_request(request_id)
        if not request or not request.driver:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫—É #{request_id} –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è")
            return False

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
        message_text = format_request_notification(request)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
        markup = types.InlineKeyboardMarkup()
        accept_btn = types.InlineKeyboardButton(
            "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
            callback_data=f"accept_request:{request_id}"
        )
        reject_btn = types.InlineKeyboardButton(
            "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
            callback_data=f"reject_request:{request_id}"
        )
        markup.add(accept_btn, reject_btn)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é
        bot.send_message(
            request.driver.telegram_id,
            message_text,
            reply_markup=markup
        )

        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—é: {e}")
        return False


def notify_about_new_message(bot, request_id, sender_id, message_text):
    """–£–≤–µ–¥–æ–º–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞—è–≤–∫–∏ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ"""
    try:
        request = crud.get_request(request_id)
        if not request:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫—É #{request_id}")
            return False

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–∞—è–≤–∫–∏ –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)
        recipients = []
        if request.dispatcher.telegram_id != sender_id:
            recipients.append(request.dispatcher)
        if request.driver and request.driver.telegram_id != sender_id:
            recipients.append(request.driver)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        notification_text = f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞—è–≤–∫–µ #{request_id}\n\n"
        notification_text += f"{message_text}\n\n"
        notification_text += f"–û—Ç: {get_user_display_name(sender_id)}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
        for recipient in recipients:
            bot.send_message(
                recipient.telegram_id,
                notification_text
            )

        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏: {e}")
        return False


def notify_about_system_event(bot, user_id, event_text):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏"""
    try:
        bot.send_message(
            user_id,
            f"‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n\n{event_text}"
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False


def format_request_notification(request):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ"""
    text = f"üöõ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request.id}\n\n"
    text += f"–ü—Ä–µ—Ñ–∏–∫—Å: {request.prefix}\n"
    text += f"–ú–∞—Ä—à—Ä—É—Ç: {request.point_a} ‚Üí {request.point_b}\n"
    text += f"–î–∞—Ç–∞/–≤—Ä–µ–º—è: {request.scheduled_time}\n"

    if request.cargo_type:
        text += f"–ì—Ä—É–∑: {request.cargo_type}\n"
    if request.weight:
        text += f"–í–µ—Å: {request.weight} –∫–≥\n"
    if request.volume:
        text += f"–û–±—ä–µ–º: {request.volume} –º¬≥\n"
    if request.comment:
        text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {request.comment}\n"

    text += f"\n–î–∏—Å–ø–µ—Ç—á–µ—Ä: {request.dispatcher.first_name}"

    return text


def get_user_display_name(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = crud.get_user(user_id)
    if not user:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    if user.username:
        return f"{user.first_name} (@{user.username})"
    else:
        return user.first_name